%% -*- coding: utf-8 -*-
%% Automatically generated, do not edit
%% Generated by gpb_compile version 3.26.4

-ifndef(cuter_proto_log_entry).
-define(cuter_proto_log_entry, true).

-define(cuter_proto_log_entry_gpb_version, "3.26.4").

-ifndef('LOGENTRY_PB_H').
-define('LOGENTRY_PB_H', true).
-record('LogEntry',
        {type,                          % = 1, {enum,'LogEntry.Type'} (optional)
         arguments = [],                % = 2, [{msg,'ErlangTerm'}]
         is_constraint,                 % = 3, bool (optional)
         tag,                           % = 4, uint64 (optional)
         spec                           % = 5, {msg,'Spec'} (optional)
        }).
-endif.

-ifndef('ERLANGTERM.MAPENTRY_PB_H').
-define('ERLANGTERM.MAPENTRY_PB_H', true).
-record('ErlangTerm.MapEntry',
        {key,                           % = 1, {msg,'ErlangTerm'} (optional)
         value                          % = 2, {msg,'ErlangTerm'} (optional)
        }).
-endif.

-ifndef('ERLANGTERM.FUNENTRY_PB_H').
-define('ERLANGTERM.FUNENTRY_PB_H', true).
-record('ErlangTerm.FunEntry',
        {arguments = [],                % = 1, [{msg,'ErlangTerm'}]
         value                          % = 2, {msg,'ErlangTerm'} (optional)
        }).
-endif.

-ifndef('ERLANGTERM_PB_H').
-define('ERLANGTERM_PB_H', true).
-record('ErlangTerm',
        {type,                          % = 1, {enum,'ErlangTerm.Type'} (optional)
         value,                         % = 2, string (optional)
         subterms = [],                 % = 3, [{msg,'ErlangTerm'}]
         shared = [],                   % = 4, [{map,string,{msg,'ErlangTerm'}}]
         improper_list_nil,             % = 5, {msg,'ErlangTerm'} (optional)
         atom_chars = [],               % = 6, [int32]
         bits = [],                     % = 7, [bool]
         map_entries = [],              % = 8, [{msg,'ErlangTerm.MapEntry'}]
         points = [],                   % = 9, [{msg,'ErlangTerm.FunEntry'}]
         otherwise,                     % = 10, {msg,'ErlangTerm'} (optional)
         arity                          % = 11, int32 (optional)
        }).
-endif.

-ifndef('SPEC.TYPEDEF_PB_H').
-define('SPEC.TYPEDEF_PB_H', true).
-record('Spec.TypeDef',
        {name,                          % = 1, string (optional)
         definition                     % = 2, {msg,'Spec.Type'} (optional)
        }).
-endif.

-ifndef('SPEC.RANGEBOUNDS_PB_H').
-define('SPEC.RANGEBOUNDS_PB_H', true).
-record('Spec.RangeBounds',
        {lower_bound,                   % = 1, string (optional)
         upper_bound                    % = 2, string (optional)
        }).
-endif.

-ifndef('SPEC.SEGMENTSIZE_PB_H').
-define('SPEC.SEGMENTSIZE_PB_H', true).
-record('Spec.SegmentSize',
        {m,                             % = 1, string (optional)
         n                              % = 2, string (optional)
        }).
-endif.

-ifndef('SPEC.FUNSIG_PB_H').
-define('SPEC.FUNSIG_PB_H', true).
-record('Spec.FunSig',
        {signature                      % oneof
        }).
-endif.

-ifndef('SPEC.FUNDET_PB_H').
-define('SPEC.FUNDET_PB_H', true).
-record('Spec.FunDet',
        {parameters = [],               % = 1, [{msg,'Spec.Type'}]
         return_value                   % = 2, {msg,'Spec.Type'} (optional)
        }).
-endif.

-ifndef('SPEC.TYPE_PB_H').
-define('SPEC.TYPE_PB_H', true).
-record('Spec.Type',
        {type,                          % = 1, {enum,'Spec.ErlType'} (optional)
         arg                            % oneof
        }).
-endif.

-ifndef('SPEC.TYPELIST_PB_H').
-define('SPEC.TYPELIST_PB_H', true).
-record('Spec.TypeList',
        {types = []                     % = 1, [{msg,'Spec.Type'}]
        }).
-endif.

-ifndef('SPEC_PB_H').
-define('SPEC_PB_H', true).
-record('Spec',
        {clauses = [],                  % = 1, [{msg,'Spec.FunSig'}]
         typedefs = []                  % = 2, [{msg,'Spec.TypeDef'}]
        }).
-endif.

-endif.
