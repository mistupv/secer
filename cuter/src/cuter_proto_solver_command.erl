%% -*- coding: utf-8 -*-
%% Automatically generated, do not edit
%% Generated by gpb_compile version 3.26.4
-module(cuter_proto_solver_command).

-export([encode_msg/1, encode_msg/2]).
-export([decode_msg/2, decode_msg/3]).
-export([merge_msgs/2, merge_msgs/3]).
-export([verify_msg/1, verify_msg/2]).
-export([get_msg_defs/0]).
-export([get_msg_names/0]).
-export([get_enum_names/0]).
-export([find_msg_def/1, fetch_msg_def/1]).
-export([find_enum_def/1, fetch_enum_def/1]).
-export([enum_symbol_by_value/2, enum_value_by_symbol/2]).
-export(['enum_symbol_by_value_SolverCommand.Type'/1, 'enum_value_by_symbol_SolverCommand.Type'/1]).
-export(['enum_symbol_by_value_ErlangTerm.Type'/1, 'enum_value_by_symbol_ErlangTerm.Type'/1]).
-export([get_service_names/0]).
-export([get_service_def/1]).
-export([get_rpc_names/1]).
-export([find_rpc_def/2, fetch_rpc_def/2]).
-export([get_package_name/0]).
-export([gpb_version_as_string/0, gpb_version_as_list/0]).

-include("cuter_proto_solver_command.hrl").
-include("gpb.hrl").


-record('map<string,ErlangTerm>',{key, value}).

-spec encode_msg(_) -> binary().
encode_msg(Msg) -> encode_msg(Msg, []).


-spec encode_msg(_, list()) -> binary().
encode_msg(Msg, Opts) ->
    case proplists:get_bool(verify, Opts) of
      true -> verify_msg(Msg, Opts);
      false -> ok
    end,
    TrUserData = proplists:get_value(user_data, Opts),
    case Msg of
      #'SolverCommand'{} ->
	  e_msg_SolverCommand(Msg, TrUserData);
      #'ErlangTerm.MapEntry'{} ->
	  'e_msg_ErlangTerm.MapEntry'(Msg, TrUserData);
      #'ErlangTerm.FunEntry'{} ->
	  'e_msg_ErlangTerm.FunEntry'(Msg, TrUserData);
      #'ErlangTerm'{} -> e_msg_ErlangTerm(Msg, TrUserData)
    end.



e_msg_SolverCommand(Msg, TrUserData) ->
    e_msg_SolverCommand(Msg, <<>>, TrUserData).


e_msg_SolverCommand(#'SolverCommand'{type = F1,
				     filename = F2, to_constraint = F3,
				     symbvar = F4, symbvar_value = F5},
		    Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  if TrF1 =:= 'LOAD_TRACE_FILE' -> Bin;
		     true ->
			 'e_enum_SolverCommand.Type'(TrF1, <<Bin/binary, 8>>)
		  end
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  case iolist_size(TrF2) of
		    0 -> B1;
		    _ -> e_type_string(TrF2, <<B1/binary, 18>>)
		  end
		end
	 end,
    B3 = if F3 == undefined -> B2;
	    true ->
		begin
		  TrF3 = id(F3, TrUserData),
		  if TrF3 =:= 0 -> B2;
		     true -> e_type_int64(TrF3, <<B2/binary, 24>>)
		  end
		end
	 end,
    B4 = if F4 == undefined -> B3;
	    true ->
		begin
		  TrF4 = id(F4, TrUserData),
		  if TrF4 =:= undefined -> B3;
		     true ->
			 e_mfield_SolverCommand_symbvar(TrF4, <<B3/binary, 34>>,
							TrUserData)
		  end
		end
	 end,
    if F5 == undefined -> B4;
       true ->
	   begin
	     TrF5 = id(F5, TrUserData),
	     if TrF5 =:= undefined -> B4;
		true ->
		    e_mfield_SolverCommand_symbvar_value(TrF5,
							 <<B4/binary, 42>>,
							 TrUserData)
	     end
	   end
    end.

'e_msg_ErlangTerm.MapEntry'(Msg, TrUserData) ->
    'e_msg_ErlangTerm.MapEntry'(Msg, <<>>, TrUserData).


'e_msg_ErlangTerm.MapEntry'(#'ErlangTerm.MapEntry'{key =
						       F1,
						   value = F2},
			    Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  if TrF1 =:= undefined -> Bin;
		     true ->
			 'e_mfield_ErlangTerm.MapEntry_key'(TrF1,
							    <<Bin/binary, 10>>,
							    TrUserData)
		  end
		end
	 end,
    if F2 == undefined -> B1;
       true ->
	   begin
	     TrF2 = id(F2, TrUserData),
	     if TrF2 =:= undefined -> B1;
		true ->
		    'e_mfield_ErlangTerm.MapEntry_value'(TrF2,
							 <<B1/binary, 18>>,
							 TrUserData)
	     end
	   end
    end.

'e_msg_ErlangTerm.FunEntry'(Msg, TrUserData) ->
    'e_msg_ErlangTerm.FunEntry'(Msg, <<>>, TrUserData).


'e_msg_ErlangTerm.FunEntry'(#'ErlangTerm.FunEntry'{arguments
						       = F1,
						   value = F2},
			    Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   if TrF1 == [] -> Bin;
	      true ->
		  'e_field_ErlangTerm.FunEntry_arguments'(TrF1, Bin,
							  TrUserData)
	   end
	 end,
    if F2 == undefined -> B1;
       true ->
	   begin
	     TrF2 = id(F2, TrUserData),
	     if TrF2 =:= undefined -> B1;
		true ->
		    'e_mfield_ErlangTerm.FunEntry_value'(TrF2,
							 <<B1/binary, 18>>,
							 TrUserData)
	     end
	   end
    end.

e_msg_ErlangTerm(Msg, TrUserData) ->
    e_msg_ErlangTerm(Msg, <<>>, TrUserData).


e_msg_ErlangTerm(#'ErlangTerm'{type = F1, value = F2,
			       subterms = F3, shared = F4,
			       improper_list_nil = F5, atom_chars = F6,
			       bits = F7, map_entries = F8, points = F9,
			       otherwise = F10, arity = F11},
		 Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  if TrF1 =:= 'INTEGER' -> Bin;
		     true ->
			 'e_enum_ErlangTerm.Type'(TrF1, <<Bin/binary, 8>>)
		  end
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  case iolist_size(TrF2) of
		    0 -> B1;
		    _ -> e_type_string(TrF2, <<B1/binary, 18>>)
		  end
		end
	 end,
    B3 = begin
	   TrF3 = id(F3, TrUserData),
	   if TrF3 == [] -> B2;
	      true ->
		  e_field_ErlangTerm_subterms(TrF3, B2, TrUserData)
	   end
	 end,
    B4 = begin
	   TrF4 = id(F4, TrUserData),
	   if TrF4 == [] -> B3;
	      true -> e_field_ErlangTerm_shared(TrF4, B3, TrUserData)
	   end
	 end,
    B5 = if F5 == undefined -> B4;
	    true ->
		begin
		  TrF5 = id(F5, TrUserData),
		  if TrF5 =:= undefined -> B4;
		     true ->
			 e_mfield_ErlangTerm_improper_list_nil(TrF5,
							       <<B4/binary,
								 42>>,
							       TrUserData)
		  end
		end
	 end,
    B6 = begin
	   TrF6 = id(F6, TrUserData),
	   if TrF6 == [] -> B5;
	      true ->
		  e_field_ErlangTerm_atom_chars(TrF6, B5, TrUserData)
	   end
	 end,
    B7 = begin
	   TrF7 = id(F7, TrUserData),
	   if TrF7 == [] -> B6;
	      true -> e_field_ErlangTerm_bits(TrF7, B6, TrUserData)
	   end
	 end,
    B8 = begin
	   TrF8 = id(F8, TrUserData),
	   if TrF8 == [] -> B7;
	      true ->
		  e_field_ErlangTerm_map_entries(TrF8, B7, TrUserData)
	   end
	 end,
    B9 = begin
	   TrF9 = id(F9, TrUserData),
	   if TrF9 == [] -> B8;
	      true -> e_field_ErlangTerm_points(TrF9, B8, TrUserData)
	   end
	 end,
    B10 = if F10 == undefined -> B9;
	     true ->
		 begin
		   TrF10 = id(F10, TrUserData),
		   if TrF10 =:= undefined -> B9;
		      true ->
			  e_mfield_ErlangTerm_otherwise(TrF10,
							<<B9/binary, 82>>,
							TrUserData)
		   end
		 end
	  end,
    if F11 == undefined -> B10;
       true ->
	   begin
	     TrF11 = id(F11, TrUserData),
	     if TrF11 =:= 0 -> B10;
		true -> e_type_int32(TrF11, <<B10/binary, 88>>)
	     end
	   end
    end.

e_mfield_SolverCommand_symbvar(Msg, Bin, TrUserData) ->
    SubBin = e_msg_ErlangTerm(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_SolverCommand_symbvar_value(Msg, Bin,
				     TrUserData) ->
    SubBin = e_msg_ErlangTerm(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_ErlangTerm.MapEntry_key'(Msg, Bin,
				   TrUserData) ->
    SubBin = e_msg_ErlangTerm(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_ErlangTerm.MapEntry_value'(Msg, Bin,
				     TrUserData) ->
    SubBin = e_msg_ErlangTerm(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_ErlangTerm.FunEntry_arguments'(Msg, Bin,
					 TrUserData) ->
    SubBin = e_msg_ErlangTerm(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_field_ErlangTerm.FunEntry_arguments'([Elem | Rest],
					Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 = 'e_mfield_ErlangTerm.FunEntry_arguments'(id(Elem,
						       TrUserData),
						    Bin2, TrUserData),
    'e_field_ErlangTerm.FunEntry_arguments'(Rest, Bin3,
					    TrUserData);
'e_field_ErlangTerm.FunEntry_arguments'([], Bin,
					_TrUserData) ->
    Bin.

'e_mfield_ErlangTerm.FunEntry_value'(Msg, Bin,
				     TrUserData) ->
    SubBin = e_msg_ErlangTerm(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_ErlangTerm_subterms(Msg, Bin, TrUserData) ->
    SubBin = e_msg_ErlangTerm(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_ErlangTerm_subterms([Elem | Rest], Bin,
			    TrUserData) ->
    Bin2 = <<Bin/binary, 26>>,
    Bin3 = e_mfield_ErlangTerm_subterms(id(Elem,
					   TrUserData),
					Bin2, TrUserData),
    e_field_ErlangTerm_subterms(Rest, Bin3, TrUserData);
e_field_ErlangTerm_subterms([], Bin, _TrUserData) ->
    Bin.

e_mfield_ErlangTerm_shared(Msg, Bin, TrUserData) ->
    SubBin = 'e_msg_map<string,ErlangTerm>'(Msg, <<>>,
					    TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_ErlangTerm_shared([Elem | Rest], Bin,
			  TrUserData) ->
    Bin2 = <<Bin/binary, 34>>,
    Bin3 =
	e_mfield_ErlangTerm_shared('tr_encode_ErlangTerm.shared[x]'(Elem,
								    TrUserData),
				   Bin2, TrUserData),
    e_field_ErlangTerm_shared(Rest, Bin3, TrUserData);
e_field_ErlangTerm_shared([], Bin, _TrUserData) -> Bin.

e_mfield_ErlangTerm_improper_list_nil(Msg, Bin,
				      TrUserData) ->
    SubBin = e_msg_ErlangTerm(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_ErlangTerm_atom_chars(Elems, Bin, TrUserData)
    when Elems =/= [] ->
    SubBin = e_pfield_ErlangTerm_atom_chars(Elems, <<>>,
					    TrUserData),
    Bin2 = <<Bin/binary, 50>>,
    Bin3 = e_varint(byte_size(SubBin), Bin2),
    <<Bin3/binary, SubBin/binary>>;
e_field_ErlangTerm_atom_chars([], Bin, _TrUserData) ->
    Bin.

e_pfield_ErlangTerm_atom_chars([Value | Rest], Bin,
			       TrUserData) ->
    Bin2 = e_type_int32(id(Value, TrUserData), Bin),
    e_pfield_ErlangTerm_atom_chars(Rest, Bin2, TrUserData);
e_pfield_ErlangTerm_atom_chars([], Bin, _TrUserData) ->
    Bin.

e_field_ErlangTerm_bits(Elems, Bin, TrUserData)
    when Elems =/= [] ->
    SubBin = e_pfield_ErlangTerm_bits(Elems, <<>>,
				      TrUserData),
    Bin2 = <<Bin/binary, 58>>,
    Bin3 = e_varint(byte_size(SubBin), Bin2),
    <<Bin3/binary, SubBin/binary>>;
e_field_ErlangTerm_bits([], Bin, _TrUserData) -> Bin.

e_pfield_ErlangTerm_bits([Value | Rest], Bin,
			 TrUserData) ->
    Bin2 = e_type_bool(id(Value, TrUserData), Bin),
    e_pfield_ErlangTerm_bits(Rest, Bin2, TrUserData);
e_pfield_ErlangTerm_bits([], Bin, _TrUserData) -> Bin.

e_mfield_ErlangTerm_map_entries(Msg, Bin, TrUserData) ->
    SubBin = 'e_msg_ErlangTerm.MapEntry'(Msg, <<>>,
					 TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_ErlangTerm_map_entries([Elem | Rest], Bin,
			       TrUserData) ->
    Bin2 = <<Bin/binary, 66>>,
    Bin3 = e_mfield_ErlangTerm_map_entries(id(Elem,
					      TrUserData),
					   Bin2, TrUserData),
    e_field_ErlangTerm_map_entries(Rest, Bin3, TrUserData);
e_field_ErlangTerm_map_entries([], Bin, _TrUserData) ->
    Bin.

e_mfield_ErlangTerm_points(Msg, Bin, TrUserData) ->
    SubBin = 'e_msg_ErlangTerm.FunEntry'(Msg, <<>>,
					 TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_ErlangTerm_points([Elem | Rest], Bin,
			  TrUserData) ->
    Bin2 = <<Bin/binary, 74>>,
    Bin3 = e_mfield_ErlangTerm_points(id(Elem, TrUserData),
				      Bin2, TrUserData),
    e_field_ErlangTerm_points(Rest, Bin3, TrUserData);
e_field_ErlangTerm_points([], Bin, _TrUserData) -> Bin.

e_mfield_ErlangTerm_otherwise(Msg, Bin, TrUserData) ->
    SubBin = e_msg_ErlangTerm(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.


'e_msg_map<string,ErlangTerm>'(#'map<string,ErlangTerm>'{key
							     = F1,
							 value = F2},
			       Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_string(TrF1, <<Bin/binary, 10>>)
	 end,
    begin
      TrF2 = id(F2, TrUserData),
      'e_mfield_map<string,ErlangTerm>_value'(TrF2,
					      <<B1/binary, 18>>, TrUserData)
    end.

'e_mfield_map<string,ErlangTerm>_value'(Msg, Bin,
					TrUserData) ->
    SubBin = e_msg_ErlangTerm(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.


'e_enum_SolverCommand.Type'('LOAD_TRACE_FILE', Bin) ->
    <<Bin/binary, 0>>;
'e_enum_SolverCommand.Type'('SOLVE', Bin) ->
    <<Bin/binary, 1>>;
'e_enum_SolverCommand.Type'('GET_MODEL', Bin) ->
    <<Bin/binary, 2>>;
'e_enum_SolverCommand.Type'('ADD_AXIOMS', Bin) ->
    <<Bin/binary, 3>>;
'e_enum_SolverCommand.Type'('FIX_VARIABLE', Bin) ->
    <<Bin/binary, 4>>;
'e_enum_SolverCommand.Type'('RESET_SOLVER', Bin) ->
    <<Bin/binary, 5>>;
'e_enum_SolverCommand.Type'('STOP', Bin) ->
    <<Bin/binary, 6>>;
'e_enum_SolverCommand.Type'(V, Bin) -> e_varint(V, Bin).

'e_enum_ErlangTerm.Type'('INTEGER', Bin) ->
    <<Bin/binary, 0>>;
'e_enum_ErlangTerm.Type'('FLOAT', Bin) ->
    <<Bin/binary, 1>>;
'e_enum_ErlangTerm.Type'('ATOM', Bin) ->
    <<Bin/binary, 2>>;
'e_enum_ErlangTerm.Type'('TUPLE', Bin) ->
    <<Bin/binary, 3>>;
'e_enum_ErlangTerm.Type'('LIST', Bin) ->
    <<Bin/binary, 4>>;
'e_enum_ErlangTerm.Type'('IMPROPER_LIST', Bin) ->
    <<Bin/binary, 5>>;
'e_enum_ErlangTerm.Type'('PID', Bin) ->
    <<Bin/binary, 6>>;
'e_enum_ErlangTerm.Type'('REFERENCE', Bin) ->
    <<Bin/binary, 7>>;
'e_enum_ErlangTerm.Type'('BITSTRING', Bin) ->
    <<Bin/binary, 8>>;
'e_enum_ErlangTerm.Type'('MAP', Bin) ->
    <<Bin/binary, 9>>;
'e_enum_ErlangTerm.Type'('FUN', Bin) ->
    <<Bin/binary, 10>>;
'e_enum_ErlangTerm.Type'('SYMBOLIC_VARIABLE', Bin) ->
    <<Bin/binary, 11>>;
'e_enum_ErlangTerm.Type'('SUBTERM', Bin) ->
    <<Bin/binary, 12>>;
'e_enum_ErlangTerm.Type'('ANY', Bin) ->
    <<Bin/binary, 13>>;
'e_enum_ErlangTerm.Type'(V, Bin) -> e_varint(V, Bin).

e_type_int32(Value, Bin)
    when 0 =< Value, Value =< 127 ->
    <<Bin/binary, Value>>;
e_type_int32(Value, Bin) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

e_type_int64(Value, Bin)
    when 0 =< Value, Value =< 127 ->
    <<Bin/binary, Value>>;
e_type_int64(Value, Bin) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

e_type_bool(true, Bin) -> <<Bin/binary, 1>>;
e_type_bool(false, Bin) -> <<Bin/binary, 0>>;
e_type_bool(1, Bin) -> <<Bin/binary, 1>>;
e_type_bool(0, Bin) -> <<Bin/binary, 0>>.

e_type_string(S, Bin) ->
    Utf8 = unicode:characters_to_binary(S),
    Bin2 = e_varint(byte_size(Utf8), Bin),
    <<Bin2/binary, Utf8/binary>>.

e_varint(N, Bin) when N =< 127 -> <<Bin/binary, N>>;
e_varint(N, Bin) ->
    Bin2 = <<Bin/binary, (N band 127 bor 128)>>,
    e_varint(N bsr 7, Bin2).



decode_msg(Bin, MsgName) when is_binary(Bin) ->
    decode_msg(Bin, MsgName, []).

decode_msg(Bin, MsgName, Opts) when is_binary(Bin) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      'SolverCommand' -> d_msg_SolverCommand(Bin, TrUserData);
      'ErlangTerm.MapEntry' ->
	  'd_msg_ErlangTerm.MapEntry'(Bin, TrUserData);
      'ErlangTerm.FunEntry' ->
	  'd_msg_ErlangTerm.FunEntry'(Bin, TrUserData);
      'ErlangTerm' -> d_msg_ErlangTerm(Bin, TrUserData)
    end.



d_msg_SolverCommand(Bin, TrUserData) ->
    dfp_read_field_def_SolverCommand(Bin, 0, 0,
				     id('LOAD_TRACE_FILE', TrUserData),
				     id([], TrUserData), id(0, TrUserData),
				     id(undefined, TrUserData),
				     id(undefined, TrUserData), TrUserData).

dfp_read_field_def_SolverCommand(<<8, Rest/binary>>, Z1,
				 Z2, F1, F2, F3, F4, F5, TrUserData) ->
    d_field_SolverCommand_type(Rest, Z1, Z2, F1, F2, F3, F4,
			       F5, TrUserData);
dfp_read_field_def_SolverCommand(<<18, Rest/binary>>,
				 Z1, Z2, F1, F2, F3, F4, F5, TrUserData) ->
    d_field_SolverCommand_filename(Rest, Z1, Z2, F1, F2, F3,
				   F4, F5, TrUserData);
dfp_read_field_def_SolverCommand(<<24, Rest/binary>>,
				 Z1, Z2, F1, F2, F3, F4, F5, TrUserData) ->
    d_field_SolverCommand_to_constraint(Rest, Z1, Z2, F1,
					F2, F3, F4, F5, TrUserData);
dfp_read_field_def_SolverCommand(<<34, Rest/binary>>,
				 Z1, Z2, F1, F2, F3, F4, F5, TrUserData) ->
    d_field_SolverCommand_symbvar(Rest, Z1, Z2, F1, F2, F3,
				  F4, F5, TrUserData);
dfp_read_field_def_SolverCommand(<<42, Rest/binary>>,
				 Z1, Z2, F1, F2, F3, F4, F5, TrUserData) ->
    d_field_SolverCommand_symbvar_value(Rest, Z1, Z2, F1,
					F2, F3, F4, F5, TrUserData);
dfp_read_field_def_SolverCommand(<<>>, 0, 0, F1, F2, F3,
				 F4, F5, _) ->
    #'SolverCommand'{type = F1, filename = F2,
		     to_constraint = F3, symbvar = F4, symbvar_value = F5};
dfp_read_field_def_SolverCommand(Other, Z1, Z2, F1, F2,
				 F3, F4, F5, TrUserData) ->
    dg_read_field_def_SolverCommand(Other, Z1, Z2, F1, F2,
				    F3, F4, F5, TrUserData).

dg_read_field_def_SolverCommand(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, F3, F4, F5, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_SolverCommand(Rest, N + 7,
				    X bsl N + Acc, F1, F2, F3, F4, F5,
				    TrUserData);
dg_read_field_def_SolverCommand(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F1, F2, F3, F4, F5, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_SolverCommand_type(Rest, 0, 0, F1, F2, F3, F4,
				     F5, TrUserData);
      18 ->
	  d_field_SolverCommand_filename(Rest, 0, 0, F1, F2, F3,
					 F4, F5, TrUserData);
      24 ->
	  d_field_SolverCommand_to_constraint(Rest, 0, 0, F1, F2,
					      F3, F4, F5, TrUserData);
      34 ->
	  d_field_SolverCommand_symbvar(Rest, 0, 0, F1, F2, F3,
					F4, F5, TrUserData);
      42 ->
	  d_field_SolverCommand_symbvar_value(Rest, 0, 0, F1, F2,
					      F3, F4, F5, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_SolverCommand(Rest, 0, 0, F1, F2, F3, F4,
					  F5, TrUserData);
	    1 ->
		skip_64_SolverCommand(Rest, 0, 0, F1, F2, F3, F4, F5,
				      TrUserData);
	    2 ->
		skip_length_delimited_SolverCommand(Rest, 0, 0, F1, F2,
						    F3, F4, F5, TrUserData);
	    5 ->
		skip_32_SolverCommand(Rest, 0, 0, F1, F2, F3, F4, F5,
				      TrUserData)
	  end
    end;
dg_read_field_def_SolverCommand(<<>>, 0, 0, F1, F2, F3,
				F4, F5, _) ->
    #'SolverCommand'{type = F1, filename = F2,
		     to_constraint = F3, symbvar = F4, symbvar_value = F5}.

d_field_SolverCommand_type(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F1, F2, F3, F4, F5, TrUserData)
    when N < 57 ->
    d_field_SolverCommand_type(Rest, N + 7, X bsl N + Acc,
			       F1, F2, F3, F4, F5, TrUserData);
d_field_SolverCommand_type(<<0:1, X:7, Rest/binary>>, N,
			   Acc, _, F2, F3, F4, F5, TrUserData) ->
    <<Tmp:32/signed-native>> = <<(X bsl N +
				    Acc):32/unsigned-native>>,
    NewFValue = 'd_enum_SolverCommand.Type'(Tmp),
    dfp_read_field_def_SolverCommand(Rest, 0, 0, NewFValue,
				     F2, F3, F4, F5, TrUserData).


d_field_SolverCommand_filename(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, F3, F4, F5, TrUserData)
    when N < 57 ->
    d_field_SolverCommand_filename(Rest, N + 7,
				   X bsl N + Acc, F1, F2, F3, F4, F5,
				   TrUserData);
d_field_SolverCommand_filename(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, _, F3, F4, F5, TrUserData) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_SolverCommand(Rest2, 0, 0, F1,
				     NewFValue, F3, F4, F5, TrUserData).


d_field_SolverCommand_to_constraint(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, F3, F4, F5, TrUserData)
    when N < 57 ->
    d_field_SolverCommand_to_constraint(Rest, N + 7,
					X bsl N + Acc, F1, F2, F3, F4, F5,
					TrUserData);
d_field_SolverCommand_to_constraint(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, _, F4, F5, TrUserData) ->
    <<NewFValue:64/signed-native>> = <<(X bsl N +
					  Acc):64/unsigned-native>>,
    dfp_read_field_def_SolverCommand(Rest, 0, 0, F1, F2,
				     NewFValue, F4, F5, TrUserData).


d_field_SolverCommand_symbvar(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, F3, F4, F5, TrUserData)
    when N < 57 ->
    d_field_SolverCommand_symbvar(Rest, N + 7,
				  X bsl N + Acc, F1, F2, F3, F4, F5,
				  TrUserData);
d_field_SolverCommand_symbvar(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, F3, F4, F5, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_ErlangTerm(Bs, TrUserData),
		   TrUserData),
    dfp_read_field_def_SolverCommand(Rest2, 0, 0, F1, F2,
				     F3,
				     if F4 == undefined -> NewFValue;
					true ->
					    merge_msg_ErlangTerm(F4, NewFValue,
								 TrUserData)
				     end,
				     F5, TrUserData).


d_field_SolverCommand_symbvar_value(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, F3, F4, F5, TrUserData)
    when N < 57 ->
    d_field_SolverCommand_symbvar_value(Rest, N + 7,
					X bsl N + Acc, F1, F2, F3, F4, F5,
					TrUserData);
d_field_SolverCommand_symbvar_value(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, F3, F4, F5, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_ErlangTerm(Bs, TrUserData),
		   TrUserData),
    dfp_read_field_def_SolverCommand(Rest2, 0, 0, F1, F2,
				     F3, F4,
				     if F5 == undefined -> NewFValue;
					true ->
					    merge_msg_ErlangTerm(F5, NewFValue,
								 TrUserData)
				     end,
				     TrUserData).


skip_varint_SolverCommand(<<1:1, _:7, Rest/binary>>, Z1,
			  Z2, F1, F2, F3, F4, F5, TrUserData) ->
    skip_varint_SolverCommand(Rest, Z1, Z2, F1, F2, F3, F4,
			      F5, TrUserData);
skip_varint_SolverCommand(<<0:1, _:7, Rest/binary>>, Z1,
			  Z2, F1, F2, F3, F4, F5, TrUserData) ->
    dfp_read_field_def_SolverCommand(Rest, Z1, Z2, F1, F2,
				     F3, F4, F5, TrUserData).


skip_length_delimited_SolverCommand(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, F3, F4, F5, TrUserData)
    when N < 57 ->
    skip_length_delimited_SolverCommand(Rest, N + 7,
					X bsl N + Acc, F1, F2, F3, F4, F5,
					TrUserData);
skip_length_delimited_SolverCommand(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, F3, F4, F5, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_SolverCommand(Rest2, 0, 0, F1, F2,
				     F3, F4, F5, TrUserData).


skip_32_SolverCommand(<<_:32, Rest/binary>>, Z1, Z2, F1,
		      F2, F3, F4, F5, TrUserData) ->
    dfp_read_field_def_SolverCommand(Rest, Z1, Z2, F1, F2,
				     F3, F4, F5, TrUserData).


skip_64_SolverCommand(<<_:64, Rest/binary>>, Z1, Z2, F1,
		      F2, F3, F4, F5, TrUserData) ->
    dfp_read_field_def_SolverCommand(Rest, Z1, Z2, F1, F2,
				     F3, F4, F5, TrUserData).


'd_msg_ErlangTerm.MapEntry'(Bin, TrUserData) ->
    'dfp_read_field_def_ErlangTerm.MapEntry'(Bin, 0, 0,
					     id(undefined, TrUserData),
					     id(undefined, TrUserData),
					     TrUserData).

'dfp_read_field_def_ErlangTerm.MapEntry'(<<10,
					   Rest/binary>>,
					 Z1, Z2, F1, F2, TrUserData) ->
    'd_field_ErlangTerm.MapEntry_key'(Rest, Z1, Z2, F1, F2,
				      TrUserData);
'dfp_read_field_def_ErlangTerm.MapEntry'(<<18,
					   Rest/binary>>,
					 Z1, Z2, F1, F2, TrUserData) ->
    'd_field_ErlangTerm.MapEntry_value'(Rest, Z1, Z2, F1,
					F2, TrUserData);
'dfp_read_field_def_ErlangTerm.MapEntry'(<<>>, 0, 0, F1,
					 F2, _) ->
    #'ErlangTerm.MapEntry'{key = F1, value = F2};
'dfp_read_field_def_ErlangTerm.MapEntry'(Other, Z1, Z2,
					 F1, F2, TrUserData) ->
    'dg_read_field_def_ErlangTerm.MapEntry'(Other, Z1, Z2,
					    F1, F2, TrUserData).

'dg_read_field_def_ErlangTerm.MapEntry'(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, F2, TrUserData)
    when N < 32 - 7 ->
    'dg_read_field_def_ErlangTerm.MapEntry'(Rest, N + 7,
					    X bsl N + Acc, F1, F2, TrUserData);
'dg_read_field_def_ErlangTerm.MapEntry'(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, F2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  'd_field_ErlangTerm.MapEntry_key'(Rest, 0, 0, F1, F2,
					    TrUserData);
      18 ->
	  'd_field_ErlangTerm.MapEntry_value'(Rest, 0, 0, F1, F2,
					      TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_ErlangTerm.MapEntry'(Rest, 0, 0, F1, F2,
						  TrUserData);
	    1 ->
		'skip_64_ErlangTerm.MapEntry'(Rest, 0, 0, F1, F2,
					      TrUserData);
	    2 ->
		'skip_length_delimited_ErlangTerm.MapEntry'(Rest, 0, 0,
							    F1, F2, TrUserData);
	    5 ->
		'skip_32_ErlangTerm.MapEntry'(Rest, 0, 0, F1, F2,
					      TrUserData)
	  end
    end;
'dg_read_field_def_ErlangTerm.MapEntry'(<<>>, 0, 0, F1,
					F2, _) ->
    #'ErlangTerm.MapEntry'{key = F1, value = F2}.

'd_field_ErlangTerm.MapEntry_key'(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    'd_field_ErlangTerm.MapEntry_key'(Rest, N + 7,
				      X bsl N + Acc, F1, F2, TrUserData);
'd_field_ErlangTerm.MapEntry_key'(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F1, F2, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_ErlangTerm(Bs, TrUserData),
		   TrUserData),
    'dfp_read_field_def_ErlangTerm.MapEntry'(Rest2, 0, 0,
					     if F1 == undefined -> NewFValue;
						true ->
						    merge_msg_ErlangTerm(F1,
									 NewFValue,
									 TrUserData)
					     end,
					     F2, TrUserData).


'd_field_ErlangTerm.MapEntry_value'(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    'd_field_ErlangTerm.MapEntry_value'(Rest, N + 7,
					X bsl N + Acc, F1, F2, TrUserData);
'd_field_ErlangTerm.MapEntry_value'(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_ErlangTerm(Bs, TrUserData),
		   TrUserData),
    'dfp_read_field_def_ErlangTerm.MapEntry'(Rest2, 0, 0,
					     F1,
					     if F2 == undefined -> NewFValue;
						true ->
						    merge_msg_ErlangTerm(F2,
									 NewFValue,
									 TrUserData)
					     end,
					     TrUserData).


'skip_varint_ErlangTerm.MapEntry'(<<1:1, _:7,
				    Rest/binary>>,
				  Z1, Z2, F1, F2, TrUserData) ->
    'skip_varint_ErlangTerm.MapEntry'(Rest, Z1, Z2, F1, F2,
				      TrUserData);
'skip_varint_ErlangTerm.MapEntry'(<<0:1, _:7,
				    Rest/binary>>,
				  Z1, Z2, F1, F2, TrUserData) ->
    'dfp_read_field_def_ErlangTerm.MapEntry'(Rest, Z1, Z2,
					     F1, F2, TrUserData).


'skip_length_delimited_ErlangTerm.MapEntry'(<<1:1, X:7,
					      Rest/binary>>,
					    N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    'skip_length_delimited_ErlangTerm.MapEntry'(Rest, N + 7,
						X bsl N + Acc, F1, F2,
						TrUserData);
'skip_length_delimited_ErlangTerm.MapEntry'(<<0:1, X:7,
					      Rest/binary>>,
					    N, Acc, F1, F2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_ErlangTerm.MapEntry'(Rest2, 0, 0,
					     F1, F2, TrUserData).


'skip_32_ErlangTerm.MapEntry'(<<_:32, Rest/binary>>, Z1,
			      Z2, F1, F2, TrUserData) ->
    'dfp_read_field_def_ErlangTerm.MapEntry'(Rest, Z1, Z2,
					     F1, F2, TrUserData).


'skip_64_ErlangTerm.MapEntry'(<<_:64, Rest/binary>>, Z1,
			      Z2, F1, F2, TrUserData) ->
    'dfp_read_field_def_ErlangTerm.MapEntry'(Rest, Z1, Z2,
					     F1, F2, TrUserData).


'd_msg_ErlangTerm.FunEntry'(Bin, TrUserData) ->
    'dfp_read_field_def_ErlangTerm.FunEntry'(Bin, 0, 0,
					     id([], TrUserData),
					     id(undefined, TrUserData),
					     TrUserData).

'dfp_read_field_def_ErlangTerm.FunEntry'(<<10,
					   Rest/binary>>,
					 Z1, Z2, F1, F2, TrUserData) ->
    'd_field_ErlangTerm.FunEntry_arguments'(Rest, Z1, Z2,
					    F1, F2, TrUserData);
'dfp_read_field_def_ErlangTerm.FunEntry'(<<18,
					   Rest/binary>>,
					 Z1, Z2, F1, F2, TrUserData) ->
    'd_field_ErlangTerm.FunEntry_value'(Rest, Z1, Z2, F1,
					F2, TrUserData);
'dfp_read_field_def_ErlangTerm.FunEntry'(<<>>, 0, 0, F1,
					 F2, TrUserData) ->
    #'ErlangTerm.FunEntry'{arguments =
			       lists_reverse(F1, TrUserData),
			   value = F2};
'dfp_read_field_def_ErlangTerm.FunEntry'(Other, Z1, Z2,
					 F1, F2, TrUserData) ->
    'dg_read_field_def_ErlangTerm.FunEntry'(Other, Z1, Z2,
					    F1, F2, TrUserData).

'dg_read_field_def_ErlangTerm.FunEntry'(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, F2, TrUserData)
    when N < 32 - 7 ->
    'dg_read_field_def_ErlangTerm.FunEntry'(Rest, N + 7,
					    X bsl N + Acc, F1, F2, TrUserData);
'dg_read_field_def_ErlangTerm.FunEntry'(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, F2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  'd_field_ErlangTerm.FunEntry_arguments'(Rest, 0, 0, F1,
						  F2, TrUserData);
      18 ->
	  'd_field_ErlangTerm.FunEntry_value'(Rest, 0, 0, F1, F2,
					      TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_ErlangTerm.FunEntry'(Rest, 0, 0, F1, F2,
						  TrUserData);
	    1 ->
		'skip_64_ErlangTerm.FunEntry'(Rest, 0, 0, F1, F2,
					      TrUserData);
	    2 ->
		'skip_length_delimited_ErlangTerm.FunEntry'(Rest, 0, 0,
							    F1, F2, TrUserData);
	    5 ->
		'skip_32_ErlangTerm.FunEntry'(Rest, 0, 0, F1, F2,
					      TrUserData)
	  end
    end;
'dg_read_field_def_ErlangTerm.FunEntry'(<<>>, 0, 0, F1,
					F2, TrUserData) ->
    #'ErlangTerm.FunEntry'{arguments =
			       lists_reverse(F1, TrUserData),
			   value = F2}.

'd_field_ErlangTerm.FunEntry_arguments'(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    'd_field_ErlangTerm.FunEntry_arguments'(Rest, N + 7,
					    X bsl N + Acc, F1, F2, TrUserData);
'd_field_ErlangTerm.FunEntry_arguments'(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, F1, F2, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_ErlangTerm(Bs, TrUserData),
		   TrUserData),
    'dfp_read_field_def_ErlangTerm.FunEntry'(Rest2, 0, 0,
					     cons(NewFValue, F1, TrUserData),
					     F2, TrUserData).


'd_field_ErlangTerm.FunEntry_value'(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    'd_field_ErlangTerm.FunEntry_value'(Rest, N + 7,
					X bsl N + Acc, F1, F2, TrUserData);
'd_field_ErlangTerm.FunEntry_value'(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F1, F2, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_ErlangTerm(Bs, TrUserData),
		   TrUserData),
    'dfp_read_field_def_ErlangTerm.FunEntry'(Rest2, 0, 0,
					     F1,
					     if F2 == undefined -> NewFValue;
						true ->
						    merge_msg_ErlangTerm(F2,
									 NewFValue,
									 TrUserData)
					     end,
					     TrUserData).


'skip_varint_ErlangTerm.FunEntry'(<<1:1, _:7,
				    Rest/binary>>,
				  Z1, Z2, F1, F2, TrUserData) ->
    'skip_varint_ErlangTerm.FunEntry'(Rest, Z1, Z2, F1, F2,
				      TrUserData);
'skip_varint_ErlangTerm.FunEntry'(<<0:1, _:7,
				    Rest/binary>>,
				  Z1, Z2, F1, F2, TrUserData) ->
    'dfp_read_field_def_ErlangTerm.FunEntry'(Rest, Z1, Z2,
					     F1, F2, TrUserData).


'skip_length_delimited_ErlangTerm.FunEntry'(<<1:1, X:7,
					      Rest/binary>>,
					    N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    'skip_length_delimited_ErlangTerm.FunEntry'(Rest, N + 7,
						X bsl N + Acc, F1, F2,
						TrUserData);
'skip_length_delimited_ErlangTerm.FunEntry'(<<0:1, X:7,
					      Rest/binary>>,
					    N, Acc, F1, F2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_ErlangTerm.FunEntry'(Rest2, 0, 0,
					     F1, F2, TrUserData).


'skip_32_ErlangTerm.FunEntry'(<<_:32, Rest/binary>>, Z1,
			      Z2, F1, F2, TrUserData) ->
    'dfp_read_field_def_ErlangTerm.FunEntry'(Rest, Z1, Z2,
					     F1, F2, TrUserData).


'skip_64_ErlangTerm.FunEntry'(<<_:64, Rest/binary>>, Z1,
			      Z2, F1, F2, TrUserData) ->
    'dfp_read_field_def_ErlangTerm.FunEntry'(Rest, Z1, Z2,
					     F1, F2, TrUserData).


d_msg_ErlangTerm(Bin, TrUserData) ->
    dfp_read_field_def_ErlangTerm(Bin, 0, 0,
				  id('INTEGER', TrUserData), id([], TrUserData),
				  id([], TrUserData),
				  'tr_decode_init_default_ErlangTerm.shared'([],
									     TrUserData),
				  id(undefined, TrUserData), id([], TrUserData),
				  id([], TrUserData), id([], TrUserData),
				  id([], TrUserData), id(undefined, TrUserData),
				  id(0, TrUserData), TrUserData).

dfp_read_field_def_ErlangTerm(<<8, Rest/binary>>, Z1,
			      Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			      TrUserData) ->
    d_field_ErlangTerm_type(Rest, Z1, Z2, F1, F2, F3, F4,
			    F5, F6, F7, F8, F9, F10, F11, TrUserData);
dfp_read_field_def_ErlangTerm(<<18, Rest/binary>>, Z1,
			      Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			      TrUserData) ->
    d_field_ErlangTerm_value(Rest, Z1, Z2, F1, F2, F3, F4,
			     F5, F6, F7, F8, F9, F10, F11, TrUserData);
dfp_read_field_def_ErlangTerm(<<26, Rest/binary>>, Z1,
			      Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			      TrUserData) ->
    d_field_ErlangTerm_subterms(Rest, Z1, Z2, F1, F2, F3,
				F4, F5, F6, F7, F8, F9, F10, F11, TrUserData);
dfp_read_field_def_ErlangTerm(<<34, Rest/binary>>, Z1,
			      Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			      TrUserData) ->
    d_field_ErlangTerm_shared(Rest, Z1, Z2, F1, F2, F3, F4,
			      F5, F6, F7, F8, F9, F10, F11, TrUserData);
dfp_read_field_def_ErlangTerm(<<42, Rest/binary>>, Z1,
			      Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			      TrUserData) ->
    d_field_ErlangTerm_improper_list_nil(Rest, Z1, Z2, F1,
					 F2, F3, F4, F5, F6, F7, F8, F9, F10,
					 F11, TrUserData);
dfp_read_field_def_ErlangTerm(<<50, Rest/binary>>, Z1,
			      Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			      TrUserData) ->
    d_field_ErlangTerm_atom_chars(Rest, Z1, Z2, F1, F2, F3,
				  F4, F5, F6, F7, F8, F9, F10, F11, TrUserData);
dfp_read_field_def_ErlangTerm(<<58, Rest/binary>>, Z1,
			      Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			      TrUserData) ->
    d_field_ErlangTerm_bits(Rest, Z1, Z2, F1, F2, F3, F4,
			    F5, F6, F7, F8, F9, F10, F11, TrUserData);
dfp_read_field_def_ErlangTerm(<<66, Rest/binary>>, Z1,
			      Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			      TrUserData) ->
    d_field_ErlangTerm_map_entries(Rest, Z1, Z2, F1, F2, F3,
				   F4, F5, F6, F7, F8, F9, F10, F11,
				   TrUserData);
dfp_read_field_def_ErlangTerm(<<74, Rest/binary>>, Z1,
			      Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			      TrUserData) ->
    d_field_ErlangTerm_points(Rest, Z1, Z2, F1, F2, F3, F4,
			      F5, F6, F7, F8, F9, F10, F11, TrUserData);
dfp_read_field_def_ErlangTerm(<<82, Rest/binary>>, Z1,
			      Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			      TrUserData) ->
    d_field_ErlangTerm_otherwise(Rest, Z1, Z2, F1, F2, F3,
				 F4, F5, F6, F7, F8, F9, F10, F11, TrUserData);
dfp_read_field_def_ErlangTerm(<<88, Rest/binary>>, Z1,
			      Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			      TrUserData) ->
    d_field_ErlangTerm_arity(Rest, Z1, Z2, F1, F2, F3, F4,
			     F5, F6, F7, F8, F9, F10, F11, TrUserData);
dfp_read_field_def_ErlangTerm(<<>>, 0, 0, F1, F2, F3,
			      F4, F5, F6, F7, F8, F9, F10, F11, TrUserData) ->
    #'ErlangTerm'{type = F1, value = F2,
		  subterms = lists_reverse(F3, TrUserData),
		  shared =
		      'tr_decode_repeated_finalize_ErlangTerm.shared'(F4,
								      TrUserData),
		  improper_list_nil = F5,
		  atom_chars = lists_reverse(F6, TrUserData),
		  bits = lists_reverse(F7, TrUserData),
		  map_entries = lists_reverse(F8, TrUserData),
		  points = lists_reverse(F9, TrUserData), otherwise = F10,
		  arity = F11};
dfp_read_field_def_ErlangTerm(Other, Z1, Z2, F1, F2, F3,
			      F4, F5, F6, F7, F8, F9, F10, F11, TrUserData) ->
    dg_read_field_def_ErlangTerm(Other, Z1, Z2, F1, F2, F3,
				 F4, F5, F6, F7, F8, F9, F10, F11, TrUserData).

dg_read_field_def_ErlangTerm(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			     F11, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_ErlangTerm(Rest, N + 7, X bsl N + Acc,
				 F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
				 TrUserData);
dg_read_field_def_ErlangTerm(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			     F11, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_ErlangTerm_type(Rest, 0, 0, F1, F2, F3, F4, F5,
				  F6, F7, F8, F9, F10, F11, TrUserData);
      18 ->
	  d_field_ErlangTerm_value(Rest, 0, 0, F1, F2, F3, F4, F5,
				   F6, F7, F8, F9, F10, F11, TrUserData);
      26 ->
	  d_field_ErlangTerm_subterms(Rest, 0, 0, F1, F2, F3, F4,
				      F5, F6, F7, F8, F9, F10, F11, TrUserData);
      34 ->
	  d_field_ErlangTerm_shared(Rest, 0, 0, F1, F2, F3, F4,
				    F5, F6, F7, F8, F9, F10, F11, TrUserData);
      42 ->
	  d_field_ErlangTerm_improper_list_nil(Rest, 0, 0, F1, F2,
					       F3, F4, F5, F6, F7, F8, F9, F10,
					       F11, TrUserData);
      50 ->
	  d_field_ErlangTerm_atom_chars(Rest, 0, 0, F1, F2, F3,
					F4, F5, F6, F7, F8, F9, F10, F11,
					TrUserData);
      58 ->
	  d_field_ErlangTerm_bits(Rest, 0, 0, F1, F2, F3, F4, F5,
				  F6, F7, F8, F9, F10, F11, TrUserData);
      66 ->
	  d_field_ErlangTerm_map_entries(Rest, 0, 0, F1, F2, F3,
					 F4, F5, F6, F7, F8, F9, F10, F11,
					 TrUserData);
      74 ->
	  d_field_ErlangTerm_points(Rest, 0, 0, F1, F2, F3, F4,
				    F5, F6, F7, F8, F9, F10, F11, TrUserData);
      82 ->
	  d_field_ErlangTerm_otherwise(Rest, 0, 0, F1, F2, F3, F4,
				       F5, F6, F7, F8, F9, F10, F11,
				       TrUserData);
      88 ->
	  d_field_ErlangTerm_arity(Rest, 0, 0, F1, F2, F3, F4, F5,
				   F6, F7, F8, F9, F10, F11, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_ErlangTerm(Rest, 0, 0, F1, F2, F3, F4, F5,
				       F6, F7, F8, F9, F10, F11, TrUserData);
	    1 ->
		skip_64_ErlangTerm(Rest, 0, 0, F1, F2, F3, F4, F5, F6,
				   F7, F8, F9, F10, F11, TrUserData);
	    2 ->
		skip_length_delimited_ErlangTerm(Rest, 0, 0, F1, F2, F3,
						 F4, F5, F6, F7, F8, F9, F10,
						 F11, TrUserData);
	    5 ->
		skip_32_ErlangTerm(Rest, 0, 0, F1, F2, F3, F4, F5, F6,
				   F7, F8, F9, F10, F11, TrUserData)
	  end
    end;
dg_read_field_def_ErlangTerm(<<>>, 0, 0, F1, F2, F3, F4,
			     F5, F6, F7, F8, F9, F10, F11, TrUserData) ->
    #'ErlangTerm'{type = F1, value = F2,
		  subterms = lists_reverse(F3, TrUserData),
		  shared =
		      'tr_decode_repeated_finalize_ErlangTerm.shared'(F4,
								      TrUserData),
		  improper_list_nil = F5,
		  atom_chars = lists_reverse(F6, TrUserData),
		  bits = lists_reverse(F7, TrUserData),
		  map_entries = lists_reverse(F8, TrUserData),
		  points = lists_reverse(F9, TrUserData), otherwise = F10,
		  arity = F11}.

d_field_ErlangTerm_type(<<1:1, X:7, Rest/binary>>, N,
			Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			TrUserData)
    when N < 57 ->
    d_field_ErlangTerm_type(Rest, N + 7, X bsl N + Acc, F1,
			    F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			    TrUserData);
d_field_ErlangTerm_type(<<0:1, X:7, Rest/binary>>, N,
			Acc, _, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			TrUserData) ->
    <<Tmp:32/signed-native>> = <<(X bsl N +
				    Acc):32/unsigned-native>>,
    NewFValue = 'd_enum_ErlangTerm.Type'(Tmp),
    dfp_read_field_def_ErlangTerm(Rest, 0, 0, NewFValue, F2,
				  F3, F4, F5, F6, F7, F8, F9, F10, F11,
				  TrUserData).


d_field_ErlangTerm_value(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			 TrUserData)
    when N < 57 ->
    d_field_ErlangTerm_value(Rest, N + 7, X bsl N + Acc, F1,
			     F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			     TrUserData);
d_field_ErlangTerm_value(<<0:1, X:7, Rest/binary>>, N,
			 Acc, F1, _, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			 TrUserData) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    dfp_read_field_def_ErlangTerm(Rest2, 0, 0, F1,
				  NewFValue, F3, F4, F5, F6, F7, F8, F9, F10,
				  F11, TrUserData).


d_field_ErlangTerm_subterms(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			    F11, TrUserData)
    when N < 57 ->
    d_field_ErlangTerm_subterms(Rest, N + 7, X bsl N + Acc,
				F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
				TrUserData);
d_field_ErlangTerm_subterms(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			    F11, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_ErlangTerm(Bs, TrUserData),
		   TrUserData),
    dfp_read_field_def_ErlangTerm(Rest2, 0, 0, F1, F2,
				  cons(NewFValue, F3, TrUserData), F4, F5, F6,
				  F7, F8, F9, F10, F11, TrUserData).


d_field_ErlangTerm_shared(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			  TrUserData)
    when N < 57 ->
    d_field_ErlangTerm_shared(Rest, N + 7, X bsl N + Acc,
			      F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			      TrUserData);
d_field_ErlangTerm_shared(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			  TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id('d_msg_map<string,ErlangTerm>'(Bs,
						  TrUserData),
		   TrUserData),
    dfp_read_field_def_ErlangTerm(Rest2, 0, 0, F1, F2, F3,
				  'tr_decode_repeated_add_elem_ErlangTerm.shared'(NewFValue,
										  F4,
										  TrUserData),
				  F5, F6, F7, F8, F9, F10, F11, TrUserData).


d_field_ErlangTerm_improper_list_nil(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				     F10, F11, TrUserData)
    when N < 57 ->
    d_field_ErlangTerm_improper_list_nil(Rest, N + 7,
					 X bsl N + Acc, F1, F2, F3, F4, F5, F6,
					 F7, F8, F9, F10, F11, TrUserData);
d_field_ErlangTerm_improper_list_nil(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				     F10, F11, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_ErlangTerm(Bs, TrUserData),
		   TrUserData),
    dfp_read_field_def_ErlangTerm(Rest2, 0, 0, F1, F2, F3,
				  F4,
				  if F5 == undefined -> NewFValue;
				     true ->
					 merge_msg_ErlangTerm(F5, NewFValue,
							      TrUserData)
				  end,
				  F6, F7, F8, F9, F10, F11, TrUserData).


d_field_ErlangTerm_atom_chars(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			      F11, TrUserData)
    when N < 57 ->
    d_field_ErlangTerm_atom_chars(Rest, N + 7,
				  X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7, F8,
				  F9, F10, F11, TrUserData);
d_field_ErlangTerm_atom_chars(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			      F11, TrUserData) ->
    Len = X bsl N + Acc,
    <<PackedBytes:Len/binary, Rest2/binary>> = Rest,
    NewSeq =
	d_packed_field_ErlangTerm_atom_chars(PackedBytes, 0, 0,
					     F6),
    dfp_read_field_def_ErlangTerm(Rest2, 0, 0, F1, F2, F3,
				  F4, F5, NewSeq, F7, F8, F9, F10, F11,
				  TrUserData).


d_packed_field_ErlangTerm_atom_chars(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, AccSeq)
    when N < 57 ->
    d_packed_field_ErlangTerm_atom_chars(Rest, N + 7,
					 X bsl N + Acc, AccSeq);
d_packed_field_ErlangTerm_atom_chars(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, AccSeq) ->
    <<NewFValue:32/signed-native>> = <<(X bsl N +
					  Acc):32/unsigned-native>>,
    d_packed_field_ErlangTerm_atom_chars(Rest, 0, 0,
					 [NewFValue | AccSeq]);
d_packed_field_ErlangTerm_atom_chars(<<>>, 0, 0,
				     AccSeq) ->
    AccSeq.


d_field_ErlangTerm_bits(<<1:1, X:7, Rest/binary>>, N,
			Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			TrUserData)
    when N < 57 ->
    d_field_ErlangTerm_bits(Rest, N + 7, X bsl N + Acc, F1,
			    F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			    TrUserData);
d_field_ErlangTerm_bits(<<0:1, X:7, Rest/binary>>, N,
			Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			TrUserData) ->
    Len = X bsl N + Acc,
    <<PackedBytes:Len/binary, Rest2/binary>> = Rest,
    NewSeq = d_packed_field_ErlangTerm_bits(PackedBytes, 0,
					    0, F7),
    dfp_read_field_def_ErlangTerm(Rest2, 0, 0, F1, F2, F3,
				  F4, F5, F6, NewSeq, F8, F9, F10, F11,
				  TrUserData).


d_packed_field_ErlangTerm_bits(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, AccSeq)
    when N < 57 ->
    d_packed_field_ErlangTerm_bits(Rest, N + 7,
				   X bsl N + Acc, AccSeq);
d_packed_field_ErlangTerm_bits(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, AccSeq) ->
    NewFValue = X bsl N + Acc =/= 0,
    d_packed_field_ErlangTerm_bits(Rest, 0, 0,
				   [NewFValue | AccSeq]);
d_packed_field_ErlangTerm_bits(<<>>, 0, 0, AccSeq) ->
    AccSeq.


d_field_ErlangTerm_map_entries(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			       F11, TrUserData)
    when N < 57 ->
    d_field_ErlangTerm_map_entries(Rest, N + 7,
				   X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7,
				   F8, F9, F10, F11, TrUserData);
d_field_ErlangTerm_map_entries(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			       F11, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id('d_msg_ErlangTerm.MapEntry'(Bs,
					       TrUserData),
		   TrUserData),
    dfp_read_field_def_ErlangTerm(Rest2, 0, 0, F1, F2, F3,
				  F4, F5, F6, F7,
				  cons(NewFValue, F8, TrUserData), F9, F10, F11,
				  TrUserData).


d_field_ErlangTerm_points(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			  TrUserData)
    when N < 57 ->
    d_field_ErlangTerm_points(Rest, N + 7, X bsl N + Acc,
			      F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			      TrUserData);
d_field_ErlangTerm_points(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			  TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id('d_msg_ErlangTerm.FunEntry'(Bs,
					       TrUserData),
		   TrUserData),
    dfp_read_field_def_ErlangTerm(Rest2, 0, 0, F1, F2, F3,
				  F4, F5, F6, F7, F8,
				  cons(NewFValue, F9, TrUserData), F10, F11,
				  TrUserData).


d_field_ErlangTerm_otherwise(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			     F11, TrUserData)
    when N < 57 ->
    d_field_ErlangTerm_otherwise(Rest, N + 7, X bsl N + Acc,
				 F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
				 TrUserData);
d_field_ErlangTerm_otherwise(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10,
			     F11, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_ErlangTerm(Bs, TrUserData),
		   TrUserData),
    dfp_read_field_def_ErlangTerm(Rest2, 0, 0, F1, F2, F3,
				  F4, F5, F6, F7, F8, F9,
				  if F10 == undefined -> NewFValue;
				     true ->
					 merge_msg_ErlangTerm(F10, NewFValue,
							      TrUserData)
				  end,
				  F11, TrUserData).


d_field_ErlangTerm_arity(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			 TrUserData)
    when N < 57 ->
    d_field_ErlangTerm_arity(Rest, N + 7, X bsl N + Acc, F1,
			     F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
			     TrUserData);
d_field_ErlangTerm_arity(<<0:1, X:7, Rest/binary>>, N,
			 Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, _,
			 TrUserData) ->
    <<NewFValue:32/signed-native>> = <<(X bsl N +
					  Acc):32/unsigned-native>>,
    dfp_read_field_def_ErlangTerm(Rest, 0, 0, F1, F2, F3,
				  F4, F5, F6, F7, F8, F9, F10, NewFValue,
				  TrUserData).


skip_varint_ErlangTerm(<<1:1, _:7, Rest/binary>>, Z1,
		       Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
		       TrUserData) ->
    skip_varint_ErlangTerm(Rest, Z1, Z2, F1, F2, F3, F4, F5,
			   F6, F7, F8, F9, F10, F11, TrUserData);
skip_varint_ErlangTerm(<<0:1, _:7, Rest/binary>>, Z1,
		       Z2, F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11,
		       TrUserData) ->
    dfp_read_field_def_ErlangTerm(Rest, Z1, Z2, F1, F2, F3,
				  F4, F5, F6, F7, F8, F9, F10, F11, TrUserData).


skip_length_delimited_ErlangTerm(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				 F10, F11, TrUserData)
    when N < 57 ->
    skip_length_delimited_ErlangTerm(Rest, N + 7,
				     X bsl N + Acc, F1, F2, F3, F4, F5, F6, F7,
				     F8, F9, F10, F11, TrUserData);
skip_length_delimited_ErlangTerm(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F1, F2, F3, F4, F5, F6, F7, F8, F9,
				 F10, F11, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_ErlangTerm(Rest2, 0, 0, F1, F2, F3,
				  F4, F5, F6, F7, F8, F9, F10, F11, TrUserData).


skip_32_ErlangTerm(<<_:32, Rest/binary>>, Z1, Z2, F1,
		   F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, TrUserData) ->
    dfp_read_field_def_ErlangTerm(Rest, Z1, Z2, F1, F2, F3,
				  F4, F5, F6, F7, F8, F9, F10, F11, TrUserData).


skip_64_ErlangTerm(<<_:64, Rest/binary>>, Z1, Z2, F1,
		   F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, TrUserData) ->
    dfp_read_field_def_ErlangTerm(Rest, Z1, Z2, F1, F2, F3,
				  F4, F5, F6, F7, F8, F9, F10, F11, TrUserData).



'd_msg_map<string,ErlangTerm>'(Bin, TrUserData) ->
    'dfp_read_field_def_map<string,ErlangTerm>'(Bin, 0, 0,
						id(undefined, TrUserData),
						id(undefined, TrUserData),
						TrUserData).

'dfp_read_field_def_map<string,ErlangTerm>'(<<10,
					      Rest/binary>>,
					    Z1, Z2, F1, F2, TrUserData) ->
    'd_field_map<string,ErlangTerm>_key'(Rest, Z1, Z2, F1,
					 F2, TrUserData);
'dfp_read_field_def_map<string,ErlangTerm>'(<<18,
					      Rest/binary>>,
					    Z1, Z2, F1, F2, TrUserData) ->
    'd_field_map<string,ErlangTerm>_value'(Rest, Z1, Z2, F1,
					   F2, TrUserData);
'dfp_read_field_def_map<string,ErlangTerm>'(<<>>, 0, 0,
					    F1, F2, _) ->
    #'map<string,ErlangTerm>'{key = F1, value = F2};
'dfp_read_field_def_map<string,ErlangTerm>'(Other, Z1,
					    Z2, F1, F2, TrUserData) ->
    'dg_read_field_def_map<string,ErlangTerm>'(Other, Z1,
					       Z2, F1, F2, TrUserData).

'dg_read_field_def_map<string,ErlangTerm>'(<<1:1, X:7,
					     Rest/binary>>,
					   N, Acc, F1, F2, TrUserData)
    when N < 32 - 7 ->
    'dg_read_field_def_map<string,ErlangTerm>'(Rest, N + 7,
					       X bsl N + Acc, F1, F2,
					       TrUserData);
'dg_read_field_def_map<string,ErlangTerm>'(<<0:1, X:7,
					     Rest/binary>>,
					   N, Acc, F1, F2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  'd_field_map<string,ErlangTerm>_key'(Rest, 0, 0, F1, F2,
					       TrUserData);
      18 ->
	  'd_field_map<string,ErlangTerm>_value'(Rest, 0, 0, F1,
						 F2, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_map<string,ErlangTerm>'(Rest, 0, 0, F1, F2,
						     TrUserData);
	    1 ->
		'skip_64_map<string,ErlangTerm>'(Rest, 0, 0, F1, F2,
						 TrUserData);
	    2 ->
		'skip_length_delimited_map<string,ErlangTerm>'(Rest, 0,
							       0, F1, F2,
							       TrUserData);
	    5 ->
		'skip_32_map<string,ErlangTerm>'(Rest, 0, 0, F1, F2,
						 TrUserData)
	  end
    end;
'dg_read_field_def_map<string,ErlangTerm>'(<<>>, 0, 0,
					   F1, F2, _) ->
    #'map<string,ErlangTerm>'{key = F1, value = F2}.

'd_field_map<string,ErlangTerm>_key'(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    'd_field_map<string,ErlangTerm>_key'(Rest, N + 7,
					 X bsl N + Acc, F1, F2, TrUserData);
'd_field_map<string,ErlangTerm>_key'(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, _, F2, TrUserData) ->
    Len = X bsl N + Acc,
    <<Utf8:Len/binary, Rest2/binary>> = Rest,
    NewFValue = unicode:characters_to_list(Utf8, unicode),
    'dfp_read_field_def_map<string,ErlangTerm>'(Rest2, 0, 0,
						NewFValue, F2, TrUserData).


'd_field_map<string,ErlangTerm>_value'(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    'd_field_map<string,ErlangTerm>_value'(Rest, N + 7,
					   X bsl N + Acc, F1, F2, TrUserData);
'd_field_map<string,ErlangTerm>_value'(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F1, F2, TrUserData) ->
    Len = X bsl N + Acc,
    <<Bs:Len/binary, Rest2/binary>> = Rest,
    NewFValue = id(d_msg_ErlangTerm(Bs, TrUserData),
		   TrUserData),
    'dfp_read_field_def_map<string,ErlangTerm>'(Rest2, 0, 0,
						F1,
						if F2 == undefined -> NewFValue;
						   true ->
						       merge_msg_ErlangTerm(F2,
									    NewFValue,
									    TrUserData)
						end,
						TrUserData).


'skip_varint_map<string,ErlangTerm>'(<<1:1, _:7,
				       Rest/binary>>,
				     Z1, Z2, F1, F2, TrUserData) ->
    'skip_varint_map<string,ErlangTerm>'(Rest, Z1, Z2, F1,
					 F2, TrUserData);
'skip_varint_map<string,ErlangTerm>'(<<0:1, _:7,
				       Rest/binary>>,
				     Z1, Z2, F1, F2, TrUserData) ->
    'dfp_read_field_def_map<string,ErlangTerm>'(Rest, Z1,
						Z2, F1, F2, TrUserData).


'skip_length_delimited_map<string,ErlangTerm>'(<<1:1,
						 X:7, Rest/binary>>,
					       N, Acc, F1, F2, TrUserData)
    when N < 57 ->
    'skip_length_delimited_map<string,ErlangTerm>'(Rest,
						   N + 7, X bsl N + Acc, F1, F2,
						   TrUserData);
'skip_length_delimited_map<string,ErlangTerm>'(<<0:1,
						 X:7, Rest/binary>>,
					       N, Acc, F1, F2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_map<string,ErlangTerm>'(Rest2, 0, 0,
						F1, F2, TrUserData).


'skip_32_map<string,ErlangTerm>'(<<_:32, Rest/binary>>,
				 Z1, Z2, F1, F2, TrUserData) ->
    'dfp_read_field_def_map<string,ErlangTerm>'(Rest, Z1,
						Z2, F1, F2, TrUserData).


'skip_64_map<string,ErlangTerm>'(<<_:64, Rest/binary>>,
				 Z1, Z2, F1, F2, TrUserData) ->
    'dfp_read_field_def_map<string,ErlangTerm>'(Rest, Z1,
						Z2, F1, F2, TrUserData).



'd_enum_SolverCommand.Type'(0) -> 'LOAD_TRACE_FILE';
'd_enum_SolverCommand.Type'(1) -> 'SOLVE';
'd_enum_SolverCommand.Type'(2) -> 'GET_MODEL';
'd_enum_SolverCommand.Type'(3) -> 'ADD_AXIOMS';
'd_enum_SolverCommand.Type'(4) -> 'FIX_VARIABLE';
'd_enum_SolverCommand.Type'(5) -> 'RESET_SOLVER';
'd_enum_SolverCommand.Type'(6) -> 'STOP';
'd_enum_SolverCommand.Type'(V) -> V.

'd_enum_ErlangTerm.Type'(0) -> 'INTEGER';
'd_enum_ErlangTerm.Type'(1) -> 'FLOAT';
'd_enum_ErlangTerm.Type'(2) -> 'ATOM';
'd_enum_ErlangTerm.Type'(3) -> 'TUPLE';
'd_enum_ErlangTerm.Type'(4) -> 'LIST';
'd_enum_ErlangTerm.Type'(5) -> 'IMPROPER_LIST';
'd_enum_ErlangTerm.Type'(6) -> 'PID';
'd_enum_ErlangTerm.Type'(7) -> 'REFERENCE';
'd_enum_ErlangTerm.Type'(8) -> 'BITSTRING';
'd_enum_ErlangTerm.Type'(9) -> 'MAP';
'd_enum_ErlangTerm.Type'(10) -> 'FUN';
'd_enum_ErlangTerm.Type'(11) -> 'SYMBOLIC_VARIABLE';
'd_enum_ErlangTerm.Type'(12) -> 'SUBTERM';
'd_enum_ErlangTerm.Type'(13) -> 'ANY';
'd_enum_ErlangTerm.Type'(V) -> V.



merge_msgs(Prev, New) -> merge_msgs(Prev, New, []).

merge_msgs(Prev, New, Opts)
    when element(1, Prev) =:= element(1, New) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case Prev of
      #'SolverCommand'{} ->
	  merge_msg_SolverCommand(Prev, New, TrUserData);
      #'ErlangTerm.MapEntry'{} ->
	  'merge_msg_ErlangTerm.MapEntry'(Prev, New, TrUserData);
      #'ErlangTerm.FunEntry'{} ->
	  'merge_msg_ErlangTerm.FunEntry'(Prev, New, TrUserData);
      #'ErlangTerm'{} ->
	  merge_msg_ErlangTerm(Prev, New, TrUserData)
    end.

merge_msg_SolverCommand(#'SolverCommand'{type = PFtype,
					 filename = PFfilename,
					 to_constraint = PFto_constraint,
					 symbvar = PFsymbvar,
					 symbvar_value = PFsymbvar_value},
			#'SolverCommand'{type = NFtype, filename = NFfilename,
					 to_constraint = NFto_constraint,
					 symbvar = NFsymbvar,
					 symbvar_value = NFsymbvar_value},
			TrUserData) ->
    #'SolverCommand'{type =
			 if NFtype =:= undefined -> PFtype;
			    true -> NFtype
			 end,
		     filename =
			 if NFfilename =:= undefined -> PFfilename;
			    true -> NFfilename
			 end,
		     to_constraint =
			 if NFto_constraint =:= undefined -> PFto_constraint;
			    true -> NFto_constraint
			 end,
		     symbvar =
			 if PFsymbvar /= undefined, NFsymbvar /= undefined ->
				merge_msg_ErlangTerm(PFsymbvar, NFsymbvar,
						     TrUserData);
			    PFsymbvar == undefined -> NFsymbvar;
			    NFsymbvar == undefined -> PFsymbvar
			 end,
		     symbvar_value =
			 if PFsymbvar_value /= undefined,
			    NFsymbvar_value /= undefined ->
				merge_msg_ErlangTerm(PFsymbvar_value,
						     NFsymbvar_value,
						     TrUserData);
			    PFsymbvar_value == undefined -> NFsymbvar_value;
			    NFsymbvar_value == undefined -> PFsymbvar_value
			 end}.

'merge_msg_ErlangTerm.MapEntry'(#'ErlangTerm.MapEntry'{key
							   = PFkey,
						       value = PFvalue},
				#'ErlangTerm.MapEntry'{key = NFkey,
						       value = NFvalue},
				TrUserData) ->
    #'ErlangTerm.MapEntry'{key =
			       if PFkey /= undefined, NFkey /= undefined ->
				      merge_msg_ErlangTerm(PFkey, NFkey,
							   TrUserData);
				  PFkey == undefined -> NFkey;
				  NFkey == undefined -> PFkey
			       end,
			   value =
			       if PFvalue /= undefined, NFvalue /= undefined ->
				      merge_msg_ErlangTerm(PFvalue, NFvalue,
							   TrUserData);
				  PFvalue == undefined -> NFvalue;
				  NFvalue == undefined -> PFvalue
			       end}.

'merge_msg_ErlangTerm.FunEntry'(#'ErlangTerm.FunEntry'{arguments
							   = PFarguments,
						       value = PFvalue},
				#'ErlangTerm.FunEntry'{arguments = NFarguments,
						       value = NFvalue},
				TrUserData) ->
    #'ErlangTerm.FunEntry'{arguments =
			       'erlang_++'(PFarguments, NFarguments,
					   TrUserData),
			   value =
			       if PFvalue /= undefined, NFvalue /= undefined ->
				      merge_msg_ErlangTerm(PFvalue, NFvalue,
							   TrUserData);
				  PFvalue == undefined -> NFvalue;
				  NFvalue == undefined -> PFvalue
			       end}.

merge_msg_ErlangTerm(#'ErlangTerm'{type = PFtype,
				   value = PFvalue, subterms = PFsubterms,
				   shared = PFshared,
				   improper_list_nil = PFimproper_list_nil,
				   atom_chars = PFatom_chars, bits = PFbits,
				   map_entries = PFmap_entries,
				   points = PFpoints, otherwise = PFotherwise,
				   arity = PFarity},
		     #'ErlangTerm'{type = NFtype, value = NFvalue,
				   subterms = NFsubterms, shared = NFshared,
				   improper_list_nil = NFimproper_list_nil,
				   atom_chars = NFatom_chars, bits = NFbits,
				   map_entries = NFmap_entries,
				   points = NFpoints, otherwise = NFotherwise,
				   arity = NFarity},
		     TrUserData) ->
    #'ErlangTerm'{type =
		      if NFtype =:= undefined -> PFtype;
			 true -> NFtype
		      end,
		  value =
		      if NFvalue =:= undefined -> PFvalue;
			 true -> NFvalue
		      end,
		  subterms =
		      'erlang_++'(PFsubterms, NFsubterms, TrUserData),
		  shared =
		      'tr_merge_ErlangTerm.shared'(PFshared, NFshared,
						   TrUserData),
		  improper_list_nil =
		      if PFimproper_list_nil /= undefined,
			 NFimproper_list_nil /= undefined ->
			     merge_msg_ErlangTerm(PFimproper_list_nil,
						  NFimproper_list_nil,
						  TrUserData);
			 PFimproper_list_nil == undefined ->
			     NFimproper_list_nil;
			 NFimproper_list_nil == undefined -> PFimproper_list_nil
		      end,
		  atom_chars =
		      'erlang_++'(PFatom_chars, NFatom_chars, TrUserData),
		  bits = 'erlang_++'(PFbits, NFbits, TrUserData),
		  map_entries =
		      'erlang_++'(PFmap_entries, NFmap_entries, TrUserData),
		  points = 'erlang_++'(PFpoints, NFpoints, TrUserData),
		  otherwise =
		      if PFotherwise /= undefined, NFotherwise /= undefined ->
			     merge_msg_ErlangTerm(PFotherwise, NFotherwise,
						  TrUserData);
			 PFotherwise == undefined -> NFotherwise;
			 NFotherwise == undefined -> PFotherwise
		      end,
		  arity =
		      if NFarity =:= undefined -> PFarity;
			 true -> NFarity
		      end}.



verify_msg(Msg) -> verify_msg(Msg, []).

verify_msg(Msg, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case Msg of
      #'SolverCommand'{} ->
	  v_msg_SolverCommand(Msg, ['SolverCommand'], TrUserData);
      #'ErlangTerm.MapEntry'{} ->
	  'v_msg_ErlangTerm.MapEntry'(Msg,
				      ['ErlangTerm.MapEntry'], TrUserData);
      #'ErlangTerm.FunEntry'{} ->
	  'v_msg_ErlangTerm.FunEntry'(Msg,
				      ['ErlangTerm.FunEntry'], TrUserData);
      #'ErlangTerm'{} ->
	  v_msg_ErlangTerm(Msg, ['ErlangTerm'], TrUserData);
      _ -> mk_type_error(not_a_known_message, Msg, [])
    end.


v_msg_SolverCommand(#'SolverCommand'{type = F1,
				     filename = F2, to_constraint = F3,
				     symbvar = F4, symbvar_value = F5},
		    Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> 'v_enum_SolverCommand.Type'(F1, [type | Path])
    end,
    if F2 == undefined -> ok;
       true -> v_type_string(F2, [filename | Path])
    end,
    if F3 == undefined -> ok;
       true -> v_type_int64(F3, [to_constraint | Path])
    end,
    if F4 == undefined -> ok;
       true ->
	   v_msg_ErlangTerm(F4, [symbvar | Path], TrUserData)
    end,
    if F5 == undefined -> ok;
       true ->
	   v_msg_ErlangTerm(F5, [symbvar_value | Path], TrUserData)
    end,
    ok.

'v_msg_ErlangTerm.MapEntry'(#'ErlangTerm.MapEntry'{key =
						       F1,
						   value = F2},
			    Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_msg_ErlangTerm(F1, [key | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_msg_ErlangTerm(F2, [value | Path], TrUserData)
    end,
    ok;
'v_msg_ErlangTerm.MapEntry'(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'ErlangTerm.MapEntry'}, X,
		  Path).

'v_msg_ErlangTerm.FunEntry'(#'ErlangTerm.FunEntry'{arguments
						       = F1,
						   value = F2},
			    Path, TrUserData) ->
    if is_list(F1) ->
	   _ = [v_msg_ErlangTerm(Elem, [arguments | Path],
				 TrUserData)
		|| Elem <- F1],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, {msg, 'ErlangTerm'}},
			 F1, Path)
    end,
    if F2 == undefined -> ok;
       true -> v_msg_ErlangTerm(F2, [value | Path], TrUserData)
    end,
    ok;
'v_msg_ErlangTerm.FunEntry'(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'ErlangTerm.FunEntry'}, X,
		  Path).

v_msg_ErlangTerm(#'ErlangTerm'{type = F1, value = F2,
			       subterms = F3, shared = F4,
			       improper_list_nil = F5, atom_chars = F6,
			       bits = F7, map_entries = F8, points = F9,
			       otherwise = F10, arity = F11},
		 Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> 'v_enum_ErlangTerm.Type'(F1, [type | Path])
    end,
    if F2 == undefined -> ok;
       true -> v_type_string(F2, [value | Path])
    end,
    if is_list(F3) ->
	   _ = [v_msg_ErlangTerm(Elem, [subterms | Path],
				 TrUserData)
		|| Elem <- F3],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, {msg, 'ErlangTerm'}},
			 F3, Path)
    end,
    'v_map<string,ErlangTerm>'(F4, [shared | Path],
			       TrUserData),
    if F5 == undefined -> ok;
       true ->
	   v_msg_ErlangTerm(F5, [improper_list_nil | Path],
			    TrUserData)
    end,
    if is_list(F6) ->
	   _ = [v_type_int32(Elem, [atom_chars | Path])
		|| Elem <- F6],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, int32}, F6, Path)
    end,
    if is_list(F7) ->
	   _ = [v_type_bool(Elem, [bits | Path]) || Elem <- F7],
	   ok;
       true -> mk_type_error({invalid_list_of, bool}, F7, Path)
    end,
    if is_list(F8) ->
	   _ = ['v_msg_ErlangTerm.MapEntry'(Elem,
					    [map_entries | Path], TrUserData)
		|| Elem <- F8],
	   ok;
       true ->
	   mk_type_error({invalid_list_of,
			  {msg, 'ErlangTerm.MapEntry'}},
			 F8, Path)
    end,
    if is_list(F9) ->
	   _ = ['v_msg_ErlangTerm.FunEntry'(Elem, [points | Path],
					    TrUserData)
		|| Elem <- F9],
	   ok;
       true ->
	   mk_type_error({invalid_list_of,
			  {msg, 'ErlangTerm.FunEntry'}},
			 F9, Path)
    end,
    if F10 == undefined -> ok;
       true ->
	   v_msg_ErlangTerm(F10, [otherwise | Path], TrUserData)
    end,
    if F11 == undefined -> ok;
       true -> v_type_int32(F11, [arity | Path])
    end,
    ok;
v_msg_ErlangTerm(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'ErlangTerm'}, X, Path).

'v_enum_SolverCommand.Type'('LOAD_TRACE_FILE', _Path) ->
    ok;
'v_enum_SolverCommand.Type'('SOLVE', _Path) -> ok;
'v_enum_SolverCommand.Type'('GET_MODEL', _Path) -> ok;
'v_enum_SolverCommand.Type'('ADD_AXIOMS', _Path) -> ok;
'v_enum_SolverCommand.Type'('FIX_VARIABLE', _Path) ->
    ok;
'v_enum_SolverCommand.Type'('RESET_SOLVER', _Path) ->
    ok;
'v_enum_SolverCommand.Type'('STOP', _Path) -> ok;
'v_enum_SolverCommand.Type'(V, Path)
    when is_integer(V) ->
    v_type_sint32(V, Path);
'v_enum_SolverCommand.Type'(X, Path) ->
    mk_type_error({invalid_enum, 'SolverCommand.Type'}, X,
		  Path).

'v_enum_ErlangTerm.Type'('INTEGER', _Path) -> ok;
'v_enum_ErlangTerm.Type'('FLOAT', _Path) -> ok;
'v_enum_ErlangTerm.Type'('ATOM', _Path) -> ok;
'v_enum_ErlangTerm.Type'('TUPLE', _Path) -> ok;
'v_enum_ErlangTerm.Type'('LIST', _Path) -> ok;
'v_enum_ErlangTerm.Type'('IMPROPER_LIST', _Path) -> ok;
'v_enum_ErlangTerm.Type'('PID', _Path) -> ok;
'v_enum_ErlangTerm.Type'('REFERENCE', _Path) -> ok;
'v_enum_ErlangTerm.Type'('BITSTRING', _Path) -> ok;
'v_enum_ErlangTerm.Type'('MAP', _Path) -> ok;
'v_enum_ErlangTerm.Type'('FUN', _Path) -> ok;
'v_enum_ErlangTerm.Type'('SYMBOLIC_VARIABLE', _Path) ->
    ok;
'v_enum_ErlangTerm.Type'('SUBTERM', _Path) -> ok;
'v_enum_ErlangTerm.Type'('ANY', _Path) -> ok;
'v_enum_ErlangTerm.Type'(V, Path) when is_integer(V) ->
    v_type_sint32(V, Path);
'v_enum_ErlangTerm.Type'(X, Path) ->
    mk_type_error({invalid_enum, 'ErlangTerm.Type'}, X,
		  Path).

v_type_sint32(N, _Path)
    when -2147483648 =< N, N =< 2147483647 ->
    ok;
v_type_sint32(N, Path) when is_integer(N) ->
    mk_type_error({value_out_of_range, sint32, signed, 32},
		  N, Path);
v_type_sint32(X, Path) ->
    mk_type_error({bad_integer, sint32, signed, 32}, X,
		  Path).

v_type_int32(N, _Path)
    when -2147483648 =< N, N =< 2147483647 ->
    ok;
v_type_int32(N, Path) when is_integer(N) ->
    mk_type_error({value_out_of_range, int32, signed, 32},
		  N, Path);
v_type_int32(X, Path) ->
    mk_type_error({bad_integer, int32, signed, 32}, X,
		  Path).

v_type_int64(N, _Path)
    when -9223372036854775808 =< N,
	 N =< 9223372036854775807 ->
    ok;
v_type_int64(N, Path) when is_integer(N) ->
    mk_type_error({value_out_of_range, int64, signed, 64},
		  N, Path);
v_type_int64(X, Path) ->
    mk_type_error({bad_integer, int64, signed, 64}, X,
		  Path).

v_type_bool(false, _Path) -> ok;
v_type_bool(true, _Path) -> ok;
v_type_bool(0, _Path) -> ok;
v_type_bool(1, _Path) -> ok;
v_type_bool(X, Path) ->
    mk_type_error(bad_boolean_value, X, Path).

v_type_string(S, Path) when is_list(S); is_binary(S) ->
    try unicode:characters_to_binary(S) of
      B when is_binary(B) -> ok;
      {error, _, _} ->
	  mk_type_error(bad_unicode_string, S, Path)
    catch
      error:badarg ->
	  mk_type_error(bad_unicode_string, S, Path)
    end;
v_type_string(X, Path) ->
    mk_type_error(bad_unicode_string, X, Path).

'v_map<string,ErlangTerm>'(KVs, Path, TrUserData)
    when is_list(KVs) ->
    [case X of
       {Key, Value} ->
	   v_type_string(Key, [key | Path]),
	   v_msg_ErlangTerm(Value, [value | Path], TrUserData);
       _ -> mk_type_error(invalid_key_value_tuple, X, Path)
     end
     || X <- KVs],
    ok;
'v_map<string,ErlangTerm>'(X, Path, _TrUserData) ->
    mk_type_error(invalid_list_of_key_value_tuples, X,
		  Path).

-spec mk_type_error(_, _, list()) -> no_return().
mk_type_error(Error, ValueSeen, Path) ->
    Path2 = prettify_path(Path),
    erlang:error({gpb_type_error,
		  {Error, [{value, ValueSeen}, {path, Path2}]}}).


prettify_path([]) -> top_level;
prettify_path(PathR) ->
    list_to_atom(string:join(lists:map(fun atom_to_list/1,
				       lists:reverse(PathR)),
			     ".")).



-compile({inline,id/2}).
id(X, _TrUserData) -> X.

-compile({inline,cons/3}).
cons(Elem, Acc, _TrUserData) -> [Elem | Acc].

-compile({inline,lists_reverse/2}).
'lists_reverse'(L, _TrUserData) -> lists:reverse(L).
-compile({inline,'erlang_++'/3}).
'erlang_++'(A, B, _TrUserData) -> A ++ B.

-compile({inline,'tr_encode_ErlangTerm.shared[x]'/2}).
'tr_encode_ErlangTerm.shared[x]'(X, _) ->
    mt_maptuple_to_pseudomsg_r(X, 'map<string,ErlangTerm>').

-compile({inline,'tr_decode_init_default_ErlangTerm.shared'/2}).
'tr_decode_init_default_ErlangTerm.shared'(_, _) ->
    mt_empty_map_r().

-compile({inline,'tr_decode_repeated_add_elem_ErlangTerm.shared'/3}).
'tr_decode_repeated_add_elem_ErlangTerm.shared'(Elem, L,
						_) ->
    mt_add_item_r(Elem, L).

-compile({inline,'tr_decode_repeated_finalize_ErlangTerm.shared'/2}).
'tr_decode_repeated_finalize_ErlangTerm.shared'(L, _) ->
    mt_finalize_items_r(L).

-compile({inline,'tr_merge_ErlangTerm.shared'/3}).
'tr_merge_ErlangTerm.shared'(X1, X2, _) ->
    mt_merge_maptuples_r(X1, X2).

-compile({inline,mt_maptuple_to_pseudomsg_r/2}).
mt_maptuple_to_pseudomsg_r({K, V}, RName) ->
    {RName, K, V}.


-compile({inline,mt_empty_map_r/0}).
mt_empty_map_r() -> dict:new().

-compile({inline,mt_add_item_r/2}).
mt_add_item_r({_RName, K, V}, D) -> dict:store(K, V, D).


-compile({inline,mt_finalize_items_r/1}).
mt_finalize_items_r(D) -> dict:to_list(D).


-compile({inline,mt_merge_maptuples_r/2}).
mt_merge_maptuples_r(L1, L2) ->
    dict:to_list(dict:merge(fun (_Key, _V1, V2) -> V2 end,
			    dict:from_list(L1), dict:from_list(L2))).




get_msg_defs() ->
    [{{enum, 'SolverCommand.Type'},
      [{'LOAD_TRACE_FILE', 0}, {'SOLVE', 1}, {'GET_MODEL', 2},
       {'ADD_AXIOMS', 3}, {'FIX_VARIABLE', 4},
       {'RESET_SOLVER', 5}, {'STOP', 6}]},
     {{enum, 'ErlangTerm.Type'},
      [{'INTEGER', 0}, {'FLOAT', 1}, {'ATOM', 2},
       {'TUPLE', 3}, {'LIST', 4}, {'IMPROPER_LIST', 5},
       {'PID', 6}, {'REFERENCE', 7}, {'BITSTRING', 8},
       {'MAP', 9}, {'FUN', 10}, {'SYMBOLIC_VARIABLE', 11},
       {'SUBTERM', 12}, {'ANY', 13}]},
     {{msg, 'SolverCommand'},
      [#field{name = type, fnum = 1, rnum = 2,
	      type = {enum, 'SolverCommand.Type'},
	      occurrence = optional, opts = []},
       #field{name = filename, fnum = 2, rnum = 3,
	      type = string, occurrence = optional, opts = []},
       #field{name = to_constraint, fnum = 3, rnum = 4,
	      type = int64, occurrence = optional, opts = []},
       #field{name = symbvar, fnum = 4, rnum = 5,
	      type = {msg, 'ErlangTerm'}, occurrence = optional,
	      opts = []},
       #field{name = symbvar_value, fnum = 5, rnum = 6,
	      type = {msg, 'ErlangTerm'}, occurrence = optional,
	      opts = []}]},
     {{msg, 'ErlangTerm.MapEntry'},
      [#field{name = key, fnum = 1, rnum = 2,
	      type = {msg, 'ErlangTerm'}, occurrence = optional,
	      opts = []},
       #field{name = value, fnum = 2, rnum = 3,
	      type = {msg, 'ErlangTerm'}, occurrence = optional,
	      opts = []}]},
     {{msg, 'ErlangTerm.FunEntry'},
      [#field{name = arguments, fnum = 1, rnum = 2,
	      type = {msg, 'ErlangTerm'}, occurrence = repeated,
	      opts = []},
       #field{name = value, fnum = 2, rnum = 3,
	      type = {msg, 'ErlangTerm'}, occurrence = optional,
	      opts = []}]},
     {{msg, 'ErlangTerm'},
      [#field{name = type, fnum = 1, rnum = 2,
	      type = {enum, 'ErlangTerm.Type'}, occurrence = optional,
	      opts = []},
       #field{name = value, fnum = 2, rnum = 3, type = string,
	      occurrence = optional, opts = []},
       #field{name = subterms, fnum = 3, rnum = 4,
	      type = {msg, 'ErlangTerm'}, occurrence = repeated,
	      opts = []},
       #field{name = shared, fnum = 4, rnum = 5,
	      type = {map, string, {msg, 'ErlangTerm'}},
	      occurrence = repeated, opts = []},
       #field{name = improper_list_nil, fnum = 5, rnum = 6,
	      type = {msg, 'ErlangTerm'}, occurrence = optional,
	      opts = []},
       #field{name = atom_chars, fnum = 6, rnum = 7,
	      type = int32, occurrence = repeated, opts = [packed]},
       #field{name = bits, fnum = 7, rnum = 8, type = bool,
	      occurrence = repeated, opts = [packed]},
       #field{name = map_entries, fnum = 8, rnum = 9,
	      type = {msg, 'ErlangTerm.MapEntry'},
	      occurrence = repeated, opts = []},
       #field{name = points, fnum = 9, rnum = 10,
	      type = {msg, 'ErlangTerm.FunEntry'},
	      occurrence = repeated, opts = []},
       #field{name = otherwise, fnum = 10, rnum = 11,
	      type = {msg, 'ErlangTerm'}, occurrence = optional,
	      opts = []},
       #field{name = arity, fnum = 11, rnum = 12, type = int32,
	      occurrence = optional, opts = []}]}].


get_msg_names() ->
    ['SolverCommand', 'ErlangTerm.MapEntry',
     'ErlangTerm.FunEntry', 'ErlangTerm'].


get_enum_names() ->
    ['SolverCommand.Type', 'ErlangTerm.Type'].


fetch_msg_def(MsgName) ->
    case find_msg_def(MsgName) of
      Fs when is_list(Fs) -> Fs;
      error -> erlang:error({no_such_msg, MsgName})
    end.


fetch_enum_def(EnumName) ->
    case find_enum_def(EnumName) of
      Es when is_list(Es) -> Es;
      error -> erlang:error({no_such_enum, EnumName})
    end.


find_msg_def('SolverCommand') ->
    [#field{name = type, fnum = 1, rnum = 2,
	    type = {enum, 'SolverCommand.Type'},
	    occurrence = optional, opts = []},
     #field{name = filename, fnum = 2, rnum = 3,
	    type = string, occurrence = optional, opts = []},
     #field{name = to_constraint, fnum = 3, rnum = 4,
	    type = int64, occurrence = optional, opts = []},
     #field{name = symbvar, fnum = 4, rnum = 5,
	    type = {msg, 'ErlangTerm'}, occurrence = optional,
	    opts = []},
     #field{name = symbvar_value, fnum = 5, rnum = 6,
	    type = {msg, 'ErlangTerm'}, occurrence = optional,
	    opts = []}];
find_msg_def('ErlangTerm.MapEntry') ->
    [#field{name = key, fnum = 1, rnum = 2,
	    type = {msg, 'ErlangTerm'}, occurrence = optional,
	    opts = []},
     #field{name = value, fnum = 2, rnum = 3,
	    type = {msg, 'ErlangTerm'}, occurrence = optional,
	    opts = []}];
find_msg_def('ErlangTerm.FunEntry') ->
    [#field{name = arguments, fnum = 1, rnum = 2,
	    type = {msg, 'ErlangTerm'}, occurrence = repeated,
	    opts = []},
     #field{name = value, fnum = 2, rnum = 3,
	    type = {msg, 'ErlangTerm'}, occurrence = optional,
	    opts = []}];
find_msg_def('ErlangTerm') ->
    [#field{name = type, fnum = 1, rnum = 2,
	    type = {enum, 'ErlangTerm.Type'}, occurrence = optional,
	    opts = []},
     #field{name = value, fnum = 2, rnum = 3, type = string,
	    occurrence = optional, opts = []},
     #field{name = subterms, fnum = 3, rnum = 4,
	    type = {msg, 'ErlangTerm'}, occurrence = repeated,
	    opts = []},
     #field{name = shared, fnum = 4, rnum = 5,
	    type = {map, string, {msg, 'ErlangTerm'}},
	    occurrence = repeated, opts = []},
     #field{name = improper_list_nil, fnum = 5, rnum = 6,
	    type = {msg, 'ErlangTerm'}, occurrence = optional,
	    opts = []},
     #field{name = atom_chars, fnum = 6, rnum = 7,
	    type = int32, occurrence = repeated, opts = [packed]},
     #field{name = bits, fnum = 7, rnum = 8, type = bool,
	    occurrence = repeated, opts = [packed]},
     #field{name = map_entries, fnum = 8, rnum = 9,
	    type = {msg, 'ErlangTerm.MapEntry'},
	    occurrence = repeated, opts = []},
     #field{name = points, fnum = 9, rnum = 10,
	    type = {msg, 'ErlangTerm.FunEntry'},
	    occurrence = repeated, opts = []},
     #field{name = otherwise, fnum = 10, rnum = 11,
	    type = {msg, 'ErlangTerm'}, occurrence = optional,
	    opts = []},
     #field{name = arity, fnum = 11, rnum = 12, type = int32,
	    occurrence = optional, opts = []}];
find_msg_def(_) -> error.


find_enum_def('SolverCommand.Type') ->
    [{'LOAD_TRACE_FILE', 0}, {'SOLVE', 1}, {'GET_MODEL', 2},
     {'ADD_AXIOMS', 3}, {'FIX_VARIABLE', 4},
     {'RESET_SOLVER', 5}, {'STOP', 6}];
find_enum_def('ErlangTerm.Type') ->
    [{'INTEGER', 0}, {'FLOAT', 1}, {'ATOM', 2},
     {'TUPLE', 3}, {'LIST', 4}, {'IMPROPER_LIST', 5},
     {'PID', 6}, {'REFERENCE', 7}, {'BITSTRING', 8},
     {'MAP', 9}, {'FUN', 10}, {'SYMBOLIC_VARIABLE', 11},
     {'SUBTERM', 12}, {'ANY', 13}];
find_enum_def(_) -> error.


enum_symbol_by_value('SolverCommand.Type', Value) ->
    'enum_symbol_by_value_SolverCommand.Type'(Value);
enum_symbol_by_value('ErlangTerm.Type', Value) ->
    'enum_symbol_by_value_ErlangTerm.Type'(Value).


enum_value_by_symbol('SolverCommand.Type', Sym) ->
    'enum_value_by_symbol_SolverCommand.Type'(Sym);
enum_value_by_symbol('ErlangTerm.Type', Sym) ->
    'enum_value_by_symbol_ErlangTerm.Type'(Sym).


'enum_symbol_by_value_SolverCommand.Type'(0) ->
    'LOAD_TRACE_FILE';
'enum_symbol_by_value_SolverCommand.Type'(1) -> 'SOLVE';
'enum_symbol_by_value_SolverCommand.Type'(2) ->
    'GET_MODEL';
'enum_symbol_by_value_SolverCommand.Type'(3) ->
    'ADD_AXIOMS';
'enum_symbol_by_value_SolverCommand.Type'(4) ->
    'FIX_VARIABLE';
'enum_symbol_by_value_SolverCommand.Type'(5) ->
    'RESET_SOLVER';
'enum_symbol_by_value_SolverCommand.Type'(6) -> 'STOP'.


'enum_value_by_symbol_SolverCommand.Type'('LOAD_TRACE_FILE') ->
    0;
'enum_value_by_symbol_SolverCommand.Type'('SOLVE') -> 1;
'enum_value_by_symbol_SolverCommand.Type'('GET_MODEL') ->
    2;
'enum_value_by_symbol_SolverCommand.Type'('ADD_AXIOMS') ->
    3;
'enum_value_by_symbol_SolverCommand.Type'('FIX_VARIABLE') ->
    4;
'enum_value_by_symbol_SolverCommand.Type'('RESET_SOLVER') ->
    5;
'enum_value_by_symbol_SolverCommand.Type'('STOP') -> 6.

'enum_symbol_by_value_ErlangTerm.Type'(0) -> 'INTEGER';
'enum_symbol_by_value_ErlangTerm.Type'(1) -> 'FLOAT';
'enum_symbol_by_value_ErlangTerm.Type'(2) -> 'ATOM';
'enum_symbol_by_value_ErlangTerm.Type'(3) -> 'TUPLE';
'enum_symbol_by_value_ErlangTerm.Type'(4) -> 'LIST';
'enum_symbol_by_value_ErlangTerm.Type'(5) ->
    'IMPROPER_LIST';
'enum_symbol_by_value_ErlangTerm.Type'(6) -> 'PID';
'enum_symbol_by_value_ErlangTerm.Type'(7) ->
    'REFERENCE';
'enum_symbol_by_value_ErlangTerm.Type'(8) ->
    'BITSTRING';
'enum_symbol_by_value_ErlangTerm.Type'(9) -> 'MAP';
'enum_symbol_by_value_ErlangTerm.Type'(10) -> 'FUN';
'enum_symbol_by_value_ErlangTerm.Type'(11) ->
    'SYMBOLIC_VARIABLE';
'enum_symbol_by_value_ErlangTerm.Type'(12) -> 'SUBTERM';
'enum_symbol_by_value_ErlangTerm.Type'(13) -> 'ANY'.


'enum_value_by_symbol_ErlangTerm.Type'('INTEGER') -> 0;
'enum_value_by_symbol_ErlangTerm.Type'('FLOAT') -> 1;
'enum_value_by_symbol_ErlangTerm.Type'('ATOM') -> 2;
'enum_value_by_symbol_ErlangTerm.Type'('TUPLE') -> 3;
'enum_value_by_symbol_ErlangTerm.Type'('LIST') -> 4;
'enum_value_by_symbol_ErlangTerm.Type'('IMPROPER_LIST') ->
    5;
'enum_value_by_symbol_ErlangTerm.Type'('PID') -> 6;
'enum_value_by_symbol_ErlangTerm.Type'('REFERENCE') ->
    7;
'enum_value_by_symbol_ErlangTerm.Type'('BITSTRING') ->
    8;
'enum_value_by_symbol_ErlangTerm.Type'('MAP') -> 9;
'enum_value_by_symbol_ErlangTerm.Type'('FUN') -> 10;
'enum_value_by_symbol_ErlangTerm.Type'('SYMBOLIC_VARIABLE') ->
    11;
'enum_value_by_symbol_ErlangTerm.Type'('SUBTERM') -> 12;
'enum_value_by_symbol_ErlangTerm.Type'('ANY') -> 13.


get_service_names() -> [].


get_service_def(_) -> error.


get_rpc_names(_) -> error.


find_rpc_def(_, _) -> error.



-spec fetch_rpc_def(_, _) -> no_return().
fetch_rpc_def(ServiceName, RpcName) ->
    erlang:error({no_such_rpc, ServiceName, RpcName}).


get_package_name() -> undefined.



gpb_version_as_string() ->
    "3.26.4".

gpb_version_as_list() ->
    [3,26,4].
