%% -*- coding: utf-8 -*-
%% Automatically generated, do not edit
%% Generated by gpb_compile version 3.26.4

-ifndef(cuter_proto_solver_response).
-define(cuter_proto_solver_response, true).

-define(cuter_proto_solver_response_gpb_version, "3.26.4").

-ifndef('SOLVERRESPONSE.MODELENTRY_PB_H').
-define('SOLVERRESPONSE.MODELENTRY_PB_H', true).
-record('SolverResponse.ModelEntry',
        {var,                           % = 1, {msg,'ErlangTerm'} (optional)
         value                          % = 2, {msg,'ErlangTerm'} (optional)
        }).
-endif.

-ifndef('SOLVERRESPONSE.MODEL_PB_H').
-define('SOLVERRESPONSE.MODEL_PB_H', true).
-record('SolverResponse.Model',
        {entries = []                   % = 1, [{msg,'SolverResponse.ModelEntry'}]
        }).
-endif.

-ifndef('SOLVERRESPONSE_PB_H').
-define('SOLVERRESPONSE_PB_H', true).
-record('SolverResponse',
        {type,                          % = 1, {enum,'SolverResponse.Type'} (optional)
         data                           % oneof
        }).
-endif.

-ifndef('ERLANGTERM.MAPENTRY_PB_H').
-define('ERLANGTERM.MAPENTRY_PB_H', true).
-record('ErlangTerm.MapEntry',
        {key,                           % = 1, {msg,'ErlangTerm'} (optional)
         value                          % = 2, {msg,'ErlangTerm'} (optional)
        }).
-endif.

-ifndef('ERLANGTERM.FUNENTRY_PB_H').
-define('ERLANGTERM.FUNENTRY_PB_H', true).
-record('ErlangTerm.FunEntry',
        {arguments = [],                % = 1, [{msg,'ErlangTerm'}]
         value                          % = 2, {msg,'ErlangTerm'} (optional)
        }).
-endif.

-ifndef('ERLANGTERM_PB_H').
-define('ERLANGTERM_PB_H', true).
-record('ErlangTerm',
        {type,                          % = 1, {enum,'ErlangTerm.Type'} (optional)
         value,                         % = 2, string (optional)
         subterms = [],                 % = 3, [{msg,'ErlangTerm'}]
         shared = [],                   % = 4, [{map,string,{msg,'ErlangTerm'}}]
         improper_list_nil,             % = 5, {msg,'ErlangTerm'} (optional)
         atom_chars = [],               % = 6, [int32]
         bits = [],                     % = 7, [bool]
         map_entries = [],              % = 8, [{msg,'ErlangTerm.MapEntry'}]
         points = [],                   % = 9, [{msg,'ErlangTerm.FunEntry'}]
         otherwise,                     % = 10, {msg,'ErlangTerm'} (optional)
         arity                          % = 11, int32 (optional)
        }).
-endif.

-endif.
